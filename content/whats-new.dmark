---
title: "What’s new?"
---

#p This page summarizes new features in minor releases. For a detailed list of all changes in all versions, see %ref[item=/release-notes.*]{}.

#section %h{Nanoc 4.13}
  #p Nanoc 4.13 adds a %command{--focus} option to the %command{compile} and %command{live} commands, which tells Nanoc to only recompile items matching the given identifier. This is helpful for very large sites, where doing a full recompile can be time-consuming. With %command{--focus}, you can tighten the feedback loop.

  #p For example, here I tell Nanoc to only recompile my stylesheets, which are located in the %filename{content/assets/style} directory:

  #listing
    %prompt{%%} %kbd{nanoc live --focus="/assets/style/**/*""}
    [snip]
    Reloading site… done
    Compiling site…
          delete  output/assets/style/2021q4_twknk-phxkn-wr7xw.css
          create  [0.70s]  output/assets/style/2021q4_rwvlp-ktclz-cw9xc.css
    Site compiled in 2.75s.
    CAUTION: A --focus option is specified. Not the entire site has been compiled.
    Re-run without --focus to compile the entire site.

  #p The %command{--focus} option can be specified more than once, too:

  #listing
    %prompt{%%} %kbd{nanoc live --focus="/assets/style/**/*" --focus="/index.*"}
    [snip]
    Reloading site… done
    Compiling site…
          delete  output/assets/style/2021q4_twknk-phxkn-wr7xw.css
          create  [0.70s]  output/assets/style/2021q4_rwvlp-ktclz-cw9xc.css
          update  [0.00s]  output/index.html
    Site compiled in 2.75s.
    CAUTION: A --focus option is specified. Not the entire site has been compiled.
    Re-run without --focus to compile the entire site.

  #caution
    #p Before deploying, be sure to run the %command{compile} command %emph{without} the %command{--focus} option. Otherwise, it is likely that the compiled site is not fully consistent, or even broken entirely.

#section %h{Nanoc 4.12}
  #p Nanoc 4.12 comes with some minor changes that will make your Nanoc workflow faster: improved live recompilation, and caching of compiled binary content.

  #section %h{Better live recompilation}
    #p The %command{compile} command now has a %command{--watch} (%command{-W}) flag, which will automatically recompile when changes are made.

    #p To use this, install the newly-released %productname{nanoc-live} by adding it inside the %code{nanoc} group in your %filename{Gemfile}:

    #listing[lang=ruby]
      group 'nanoc' do
        gem 'nanoc-live'
      end

    #p If your %filename{Gemfile} contains the line %code{gem 'guard-nanoc'}, remove it. The %ref[url=https://github.com/nanoc/nanoc/tree/main/guard-nanoc]{%productname{guard-nanoc}} gem provides similar (but older) functionality to %productname{nanoc-live}.

    #p In addition to %command{compile --watch}, you can also use the new %command{nanoc live} command, which automatically recompiles %emph{and} runs a web server that reloads your browser when changes are made.

    #listing
      %prompt{%%} %kbd{nanoc live}
      View the site at http://127.0.0.1:3000/
      [2021-02-20 09:38:52] INFO  WEBrick 1.7.0
      [2021-02-20 09:38:52] INFO  ruby 3.0.0 (2020-12-25) [x86_64-darwin20]
      [2021-02-20 09:38:52] INFO  WEBrick::HTTPServer#start: pid=78056 port=3000
      Compiling site…
      Site compiled in 0.69s.

      Listening for site changes…

    #p Visit the URL that %command{nanoc live} prints (in this case, %code{http://127.0.0.1:3000/}), make some changes to your site content, and you’ll see your changes reflected in the browser just after you save.

    #note
      #p On Ruby 3.0 and later, you might get the following error:

      #listing
        LoadError: Couldn't find handler for: puma, thin, falcon, webrick.

      #p To fix this, add the %code{webrick} gem to your %filename{Gemfile}:

      #listing[lang=ruby]
        gem 'webrick'


  #section %h{Binary content caching}
    #p While previous versions of Nanoc already kept a cache of compiled textual content (such as compiled Markdown files), this wasn’t yet the case for binary content (such as images). Nanoc 4.12 now caches compiled binary content as well, which will provide a speedup for asset-heavy web sites.

    #p To minimize disk space usage for this cache of compiled binary content, add %ref[url=https://codeberg.org/da/ruby-clonefile]{%productname{clonefile}} to your %filename{Gemfile}:

    #listing[lang=ruby]
      gem 'clonefile'

    #p This will enable copy-on-write (COW) support on modern filesystems such as APFS (but not HFS+).

#section %h{Nanoc 4.11}
  #p In Nanoc 4.11, the Sass filter supports generating inline source maps. To do so, pass %code{sourcemap_path: :inline}:

  #listing[lang=ruby]
    compile '/assets/*.scss'
      filter :sass, syntax: :sass, sourcemap_path: :inline
      write ext: 'css'
    end

  #p Secondly, the Breadcrumbs helper’s %code{#breadcrumbs_trail} function can now deal with ambiguity. There are cases where one item has more than one potential parent item, and the new %code{:tiebreaker} option can now be used to deal with that. See %ref[frag=breadcrumbs-dealing-with-ambiguity,item=/doc/reference/helpers.*]{} for details.

#section %h{Nanoc 4.10}
  #p Nanoc 4.10 comes with an upgraded Sass filter. It comes with a new %code{nanoc()} Sass function, which allows pulling in Nanoc site data into stylesheets:

  #listing[lang=sass]
    .title {
      content: nanoc('@config[:title]');
    %}

  #p The Sass filter also comes with a matching %code{:sass_sourcemap} filter, which generates Sass source maps. See %ref[item=/doc/guides/using-common-filters.*,frag=using-sass-source-maps]{} for details.

#section %h{Nanoc 4.9}
  #p The list of enabled checks can now be specified in the configuration file, rather than the %filename{Checks} file. For example:

  #listing[lang=ruby,legacy-49,x]
    # in the Checks file
    deploy_check :internal_links
    deploy_check :stale

  #listing[lang=yaml,new-49]
    # in nanoc.yaml
    checking:
      enabled_checks:
        - internal_links
        - stale

  #p Additionally, custom check can now be defined using %code{Nanoc::Check.define}, somewhere in the %filename{lib/} directory:

  #listing[lang=ruby,legacy-49]
    # in the Checks file
    check :no_unprocessed_erb do
      @output_filenames.each do |filename|
        if filename =~ /html$/ && File.read(filename).match(/<%%/)
          add_issue("unprocessed erb detected", subject: filename)
        end
      end
    end

  #listing[lang=ruby,new-49]
    # somewhere in lib/
    Nanoc::Check.define(:no_unprocessed_erb) do
      @output_filenames.each do |filename|
        if filename =~ /html$/ && File.read(filename).match(/<%%/)
          add_issue("unprocessed erb detected", subject: filename)
        end
      end
    end

  #p Lastly, invoking the %command{check} command with no options will now run all enabled checks (either enabled using %code{deploy_check} in the %filename{Checks} file, or listed under %code{enabled_checks} in the configuration file).

  #p Use of the %filename{Checks} file is discouraged from now on, though the functionality will not be removed before Nanoc 5.0 (and there are no plans to start working on Nanoc 5.0 at this point in time).

  #p Identifiers now also have a %code{#match?} method, which returns %code{true} if the identifier matches the given pattern, %code{false} otherwise.

#section %h{Nanoc 4.8}
  #p Nanoc 4.8 adds an %code{asciidoctor} filter, for invoking %ref[url=https://asciidoctor.org]{Asciidoctor}, a Ruby implementation of %ref[url=http://www.methods.co.nz/asciidoc/]{AsciiDoc}:

  #listing[lang=ruby]
    compile '/**/*.adoc' do
      filter :asciidoctor
      layout '/page.*'
      write ext: 'html'
    end

  #p Previously, the %code{asciidoctor} was available through the %code{nanoc-asciidoctor} gem, which is now obsolete.

#section %h{Nanoc 4.7}
  #p Nanoc 4.7 adds a shortcut for writing an item with a specific extension, while retaining the base name:

  #listing[lang=ruby]
    compile '/**/*.md' do
      filter :kramdown
      write ext: 'html'
    end

  #p Previously, you’d have to use the rather verbose %code{write item.identifier.without_exts + '.html'}.

  #p Nanoc 4.7 also adds the %code{:erubi} filter, which calls %ref[url=https://github.com/jeremyevans/erubi]{Erubi}, an ERB template engine for Ruby.

#section %h{Nanoc 4.6}
  #p Nanoc 4.6 adds %code{#snapshot?} to item representations. It returns true if the given representations has a snapshot with the given name, false otherwise. For example:

  #listing[lang=rhtml]
    <%% if @rep.snapshot?(:latex) %%>
      <link rel=stylesheet href=latex.css>
    <%% end %%>

  #p The %code{#content_for} function, part of the capturing helper (see %ref[item=/doc/reference/helpers.*,frag=capturing]{} for details), can now be used to set captured content directly:

  #listing[lang=ruby]
    content_for(:head, 'stuff')

  #p Previously, setting captured content manually was only possible by appending to %code{_erbout}:

  #listing[lang=ruby]
    content_for(:head) { _erbout << 'stuff' %}

  #p When passing a string to the %code{#content_for} function, parameters are passed before the string argument:

  #listing[lang=ruby]
    content_for(:head, existing: :append, 'stuff')

  #p Lastly, items and layouts now have %code{#raw_content=} during preprocessing, to allow changing the raw content of items and layouts.

#section %h{Nanoc 4.5}
  #p Nanoc 4.5 bundles the Git deployer, which used to be in the %ref[url=https://github.com/nanoc-archive/nanoc-git]{%code{nanoc-git} repository}. The %code{nanoc-git} gem can be removed from the %filename{Gemfile}. For details, see %ref[item=/doc/deploying.*,frag=with-git]{}.

#section %h{Nanoc 4.4}
  #p Nanoc 4.4 adds support for environments. The %command{compile} command now takes an %command{--env} option, e.g. %command{nanoc compile --env=prod}, which sets the %code{NANOC_ENV} environment variable to the given value, and also changes the way the configuration is read.

  #p The configuration can now contain an %code{environments} section, like this:

  #listing[lang=yaml]
    base_url: http://nanoc.dev

    environments:
      prod:
        base_url: https://nanoc.app
      staging:
        base_url: http://staging.nanoc.ws

  #p When an environment is specified on the command line, the data for the environment with the given name will be merged into the top level of the configuration. For example, with %command{--env=prod}, the configuration effectively becomes as follows:

  #listing[lang=yaml]
    base_url: https://nanoc.app

  #p For details about environments, see %ref[item=/doc/sites.*,frag=environments]{}.

#section %h{Nanoc 4.3}
  #p Nanoc 4.3 adds %code{Nanoc::Filter.define}, which makes defining filters a little less verbose:

  #listing[lang=ruby]
    Nanoc::Filter.define(:censor) do |content, params|
      content.gsub('Nanoc sucks', 'Nanoc rocks')
    end

  #p See %ref[item=/doc/filters.*,frag=writing-filters]{} for details.

  #p Additionally, Nanoc will automatically %code{require} all gems defined in the %code{nanoc} group in the %filename{Gemfile}. This is particularly useful for the %code{guard-nanoc} gem, which, when added to the %code{nanoc} group in the %filename{Gemfile}, will add a new %command{live} command to %command{nanoc}. This %command{nanoc live} command simultaneously recompiles the site on changes, and runs a web server. See the %ref[url=https://github.com/guard/guard-nanoc]{%code{guard-nanoc} repository} for details.

#section %h{Nanoc 4.2 and older}
  #p Release notes are pending. For the time being, see %ref[item=/release-notes.*]{}.
