---
title: "Deploying Nanoc sites"
short_title: "Deploying"
---

#p Nanoc provides functionality for automating deployment through the %command{nanoc deploy} command. The automated deployment setup is described below.

#p The Nanoc configuration file (%filename{nanoc.yaml}, or %filename{config.yaml} on older sites) can contain a %code{deploy} section, such as the following:

#listing[lang=yaml]
  deploy:
    default:
      kind: git
      remote: git@int.nanoc.ws:/srv/http/nanoc.ws.git
      branch: prod
      forced: true
    staging:
      kind: rsync
      dst:  "int.nanoc.ws:/srv/http/staging.nanoc.ws"

#p The %code{deploy} section describes %firstterm{deployment targets}, which describe where to deploy to and how to do the deployment. In the example above, the targets are %code{default} and %code{staging}. The %code{kind} attribute describes the deployer to use. In the example above, %code{git} and %code{rsync} are used for the %code{default} and %code{staging} targets, respectively.

#section %h[id=with-git]{With GitHub Pages or Bitbucket}
  #p %ref[url=https://github.com/]{GitHub} and %ref[url=https://bitbucket.org/]{Bitbucket} are repository hosting services that support publishing websites. This section explains how to use their functionality for publishing a website in combination with Nanoc.

  #section %h{Disable %filename{.git} pruning}
    #p Because GitHub Pages and Bitbucket both use Git to publish, it’s important to prevent the %filename{.git} directory from being pruned away. In %filename{nanoc.yaml}, look for a %code{prune} section, and if it exists, ensure that it has an %code{exclude} configuration option, and that it includes %code{.git}. The following is a correct set-up:

    #listing[lang=yaml]
      prune:
        auto_prune: true
        exclude: [ '.git' ]

  #section %h{GitHub Pages setup}
    #p The publishing of a website based on a Git repository to GitHub Pages is %ref[url=https://help.github.com/en/articles/creating-project-pages-using-the-command-line]{described in GitHub's help pages}.

    #p Clone the current repository into the %filename{output/} directory, create an orphaned branch dedicated to GitHub Pages named %code{gh-pages}, check out the new branch and remove everything in it:

    #listing
      %prompt{%%} %kbd{rm -rf output}
      %prompt{%%} %kbd{git clone . output}
      %prompt{%%} %kbd{cd output}
      %prompt{output@master%%} %kbd{git checkout --orphan gh-pages}
      %prompt{output@gh-pages%%} %kbd{git rm -rf .}
      %prompt{output@gh-pages%%} %kbd{git commit --m 'Create gh-pages branch' --allow-empty}

    #p Change the remote for this repository to point to the GitHub repository, rather than the local repository. To do so, execute the following %command{git remote} commands, replacing %var{repo-url} with the URL to the repository:

    #listing
      %prompt{output@gh-pages%%} %kbd{git remote rm origin}
      %prompt{output@gh-pages%%} %kbd{git remote add origin} %var{repo-url}

    #p Add the %filename{output/} directory to your %filename{.gitignore}. Make sure that the base repository doesn’t contain the %filename{output/} directory.

  #section %h{Bitbucket setup}
    #p The publishing of a website based on a Git repository to Bitbucket is %ref[url=https://confluence.atlassian.com/bitbucket/publishing-a-website-on-bitbucket-cloud-221449776.html]{described in Bitbucket's help pages}.

    #p Bitbucket supports publishing a website at %uri{username.bitbucket.org}, where %var{username} is your Bitbucket account name. The contents of the website will be read from a repository named %uri{username.bitbucket.org}.

    #p First of all, create a Bitbucket repository corresponding to your Bitbucket website address, e.g. %uri{ddfreyne.bitbucket.org}.

    #p Create a new Git repository inside the %filename{output/} directory, replacing %var{repo-url} with the URL to the repository (e.g. %code{git@bitbucket.org:ddfreyne/ddfreyne.bitbucket.org.git}):

    #listing
      %prompt{%%} %kbd{git init output/}
      %prompt{%%} %kbd{cd output/}
      %prompt{output%%} %kbd{git remote add origin} %var{repo-url}
      %prompt{output%%} %kbd{git commit --m 'Init repo' --allow-empty}

    #p Add the %filename{output/} directory to your %filename{.gitignore}. Make sure that the base repository doesn’t contain %filename{output/}.

  #section %h{Automated deployment}
    #p To deploy the site using the %command{nanoc deploy} command, add a deployment target with the target %code{git} to the Nanoc configuration file (%filename{nanoc.yaml}, or %filename{config.yaml} on older sites):

    #listing[lang=yaml]
      deploy:
        default:
          kind: git
          branch: gh-pages

    #p For Bitbucket, set %code{branch} to %code{master}, and for GitHub, set it to %code{gh-pages}.

  #section %h{Publish}
    #p To publish a site, compile it and run %command{deploy}:

    #listing
      %prompt{%%} %kbd{bundle exec nanoc}
      %prompt{%%} %kbd{bundle exec nanoc deploy}

    #p After a few seconds, the updated site will appear at %uri{http://username.github.io/repo-name} for GitHub, or %uri{http://username.bitbucket.org} for Bitbucket.

    #p For GitHub, we recommend removing the %code{gh-pages} branch from the base repository, since it is likely to be out of sync with the %code{gh-pages} branch in the repository in the %filename{output/} directory.

#section %h{With CI pipeline tools}
  #p It is possible to let CI pipeline tools, such as GitLab CI, perform the compilation and deployment. With this approach, %command{git push} is used rather than a %command{nanoc deploy}.

  #section %h{GitLab CI setup}
    #p The publishing of a website based on a Git repository to %ref[url=https://gitlab.com/]{GitLab} is %ref[url=https://docs.gitlab.com/ee/user/project/pages/index.html]{described in GitLab Pages’s documentation pages}. This guide assumes you are deploying to %uri{gitlab.com}; please follow this %ref[url=https://docs.gitlab.com/ee/administration/pages/index.html]{documentation} if you are running your own GitLab instance.

    #p GitLab supports publishing a website at %uri{namespace.gitlab.io}, where %var{namespace} is your GitLab account or group name. The contents of the website will be read from a repository named %uri{namespace.gitlab.io}.

    #p First of all, create a GitLab project corresponding to your GitLab website address, e.g. %uri{ddfreyne.gitlab.io}.

    #p GitLab Pages only serves content from the %filename{public/} directory, so rename the %filename{output/} directory to %filename{public/} and change the value of %code{output_dir} in %filename{nanoc.yaml} to %var{public}.

    #p Create a %filename{.gitlab-ci.yml} file with the following content:

    #listing[lang=yaml]
      image: ruby:2.7
      pages:
        script:
          - bundle install -j4
          - bundle exec nanoc
        artifacts:
          paths:
            - public
        only:
          - master

    #p Push to trigger the build:

    #listing
      %prompt{%%} %kbd{git push -u origin master}

    #p GitLab CI will build and deploy the website. Once it has finished, the site will be accessible at %uri{namespace.gitlab.io}.

    #p To run deployment checks, add %code{bundle exec nanoc check --deploy} to the %filename{.gitlab-ci.yml} file, after %code{bundle exec nanoc}:

    #listing[lang=yaml]
      image: ruby:2.7
      pages:
        script:
          - bundle install -j4
          - bundle exec nanoc
          - bundle exec nanoc check --deploy
        artifacts:
          paths:
            - public
        only:
          - master

    #p A deploy will now only succeed if checks pass.

#section %h{With Netlify}
  #p %ref[url=https://www.netlify.com/]{Netlify} supports Nanoc out of the box, and deploying onto Netlify is as simple as giving it the Git repository containing your Nanoc site source.

#section %h{With rsync}
  #p To use %command{rsync} as the deployment method, set %code{kind} to %code{rsync} in the deployment configuration, and set %code{dst} to the destination, in the format used by %command{rsync}. For example:

  #listing[lang=yaml]
    deploy:
      public:
        kind: rsync
        dst:  "stoneship.org:/var/www/sites/example.com/public"
      staging:
        kind: rsync
        dst:  "stoneship.org:/var/www/sites/example.com/public/staging"

  #p By default, the rsync deployer will upload all files in the output directory to the given location. None of the existing files in the target location will be deleted, but existing files with the same name will be overwritten. To deploy, run %command{deploy} with the name of a target, like this:

  #listing
    %prompt{%%} %kbd{nanoc deploy staging}

  #p This will deploy using the “staging” configuration. Replace “staging” with “public” if you want to deploy to the location marked with “public”.

  #p To check whether the executed %command{rsync} command is correct, perform a dry run by passing %command{--dry-run}. The %command{rsync} command will be printed, but not executed. For example:

  #listing
    %prompt{%%} %kbd{nanoc deploy public --dry-run}

  #section %h{Deleting stray files}
    #p Nanoc will, by default, only update files that have changed, and not remove any files from the remote destination. If you want to let %command{nanoc deploy} remove any files on the destination that are not part of the Nanoc site, you can modify the options used for rsync to include %command{--delete-after}, like this:

    #listing[lang=yaml]
      options: [ '-aP', '--delete-after' ]

    #caution This will remove all files and directories that do not correspond to Nanoc items from the deployment destination.

#section %h{With fog}
  #p %ref[url=https://fog.io]{fog} is a Ruby gem for interfacing with various cloud services, such as AWS or Google Cloud.

  #p To use fog for deployment, install the %productname{fog} gem (or add it to the %filename{Gemfile} and run %kbd{bundle install}). Change the deployment configuration in %filename{nanoc.yaml} to reflect the fog configuration. Here is an example for Amazon S3:

  #listing[lang=yaml]
    deploy:
      default:
        kind:                  fog
        provider:              aws
        region:                eu-west-1
        bucket:                nanoc.ws
        aws_access_key_id:     AKIAABC123XYZ456MNO789
        aws_secret_access_key: fd6eb5b112a894026d7b82aab3cafadaa63fce39
        path_style:            true

  #p The %code{kind} attribute, which identifies the kind of deployer to use, should be set to %code{fog}. You’ll also need to specify %code{provider}, containing the name of the fog provider that you want to use. Each provider has their own configuration; see the %ref[url=http://fog.io/about/provider_documentation.html]{fog provider documentation} for details. For buckets whose names contain periods, %code{path_style} should be set to %code{true}.

  #p To publish your Nanoc site, use the %command{deploy} command, as usual:

  #listing
    %prompt{%%} %kbd{nanoc deploy}
    Loading site data… done
    Connecting
    Getting bucket
    Uploading local files
    Removing remote files
    Done!
    %prompt{%%}

#section %h{With Git to a web server}

  #p For a server setup using SSH, see %ref[url=https://ecoconsulting.co.uk/solutions/#deploy-a-website-to-a-server-using-git]{Deploy a website to a server using Git} and SSH access. Once set up (and having run %command{nanoc compile} and committed the main local repository) %command{nanoc deploy} pushes a %em{nested repository} in Nanoc’s %code{output} folder to a %em{bare repository} on the server. Site files are moved to the required location by a %filename{post-receive} file (e.g. at: %code{username/websiterepo.git/hooks/post-receive})—for example:
  
  #listing[lang=bash]
    #!/bin/sh
      git --work-tree=/PATH_TO_SITE_ROOT --git-dir=PATH_TO_BARE_REPO.git checkout -f

  #p In %filename{nanoc.yaml}:
  
  #listing[lang=bash]
    deploy:
      default:
        kind: git
        remote: ssh://USER@IP:PORT/PATH_TO_BARE_REPO.git
        branch: deploy
        forced: true

  Alternatively, you can copy the (similar) setup used for %uri{denisdefreyne.com} (change %var{TARGET}, %var{GIT_DIR} and Git deployment %var{BRANCH} to match your setup):

  #listing[lang=bash]
    #!/bin/bash

    set -ex

    TARGET="/var/www/virtual/username/website.com"
    GIT_DIR="/home/username/web/websiterepo.com.git"

    BRANCH="built"

    while read oldrev newrev ref
    do
      if [ "$ref" = "refs/heads/$BRANCH" ];
      then
        echo "Ref $ref received. Deploying ${BRANCH} branch on server..."
        git --work-tree="${TARGET}" --git-dir="${GIT_DIR}" checkout -f ${BRANCH}
      else
        echo "Ref $ref received. Doing nothing: only the ${BRANCH} branch may be deployed on this server."
      fi
    done

