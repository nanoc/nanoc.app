---
title: "Rules"
---

#p The %filename{Rules} file contains the processing instructions for all items in a Nanoc site. Three different kinds of rules exist:

#dl
  #dt compilation rules
  #dd These rules describe the actions that should be executed during compilation (filtering, layouting, and snapshotting).

  #dt routing rules
  #dd These rules describe the path where the compiled items should be written to.

  #dt layouting rules
  #dd These rules describe the filter that should be used for a given layout.

#p For every item, Nanoc finds the first matching compilation rule. Similarly, for every layout, Nanoc finds the first matching layouting rule. The first matching rule that is found in the rules file is used. If an item or a layout is not using the correct rule, double-check to make sure that the rules are in the correct order.

#section %h{Compilation rules}
  #p A compilation rule describes how an item should be transformed. It has the following shape:

  #listing[lang=ruby]
    compile "/some/pattern.*" do
      # (compilation code here)
    end

  #p The argument for the %code{compile()} method call is a %ref[item=/doc/identifiers-and-patterns.*,frag=patterns]{pattern}.

  #p The code block should execute the necessary actions for compiling the item. The return value of the block is ignored. There are three kinds actions that can be performed:

  #ul
    #li %emph{filter} items, transforming their content
    #li %emph{layout} items, placing their content inside a layout
    #li %emph{snapshot} items, remembering their content at that point in time for reuse

  #p Lastly, a compilation block can end with a %emph{write} action, which will write the compiled content to a file with the given name. (Alternatively, you can use %ref[frag=routing-rules]{routing rules} to describe where compiled content should be written to.)

  #p The code block does not need to execute anything. An empty %code{compile()} block will not execute anything. The following rule will not perform any actions, i.e. the item will not be filtered nor laid out:

  #listing[lang=ruby]
    compile '/images/**/*' do
    end

  #section %h{Writing}
    #p A compilation rule can contain a %code{write()} call, which will write out the item representation in its current state. It can be called in three ways:

    #dl
      #dt with a string
      #dd writes the item rep to the given path, relative from the output directory

      #dt with %code{nil}
      #dd prevents Nanoc from applying a matching routing rule (see below for details)

      #dt with %code{:ext}
      #dd writes the item rep to a path that is the same as the identifier, but with a different extension

    #p For example, this compilation rule will copy %filename{/images/denis.jpg} without further processing:

    #listing[lang=ruby]
      compile '/images/**/*' do
        write item.identifier.to_s
      end

    #p This compilation rule will copy all %code{.jpg} and %code{.jpeg} files, and give them the extension %code{.jpg}:

    #listing[lang=ruby]
      compile '/**/*.{jpg,jpeg%}' do
        write item.identifier.without_exts + '.jpg'
      end

    #p To keep the basename of an item and only change the extension when writing, you can pass the %code{ext} param, specifying an extension. The following compilation rule is the same as the above one, but more concise:

    #listing[lang=ruby]
      compile '/**/*.{jpg,jpeg%}' do
        write ext: 'jpg'
      end

    #p[id=prevent-applying-routing-rule] To prevent Nanoc from applying a matching routing rule, call %code{write nil} at the end of a compilation rule. In the following example, no items in %filename{snippets/} will be written out, because the routing rule is skipped:

    #listing[lang=ruby]
      compile '/snippets/*.md' do
        filter :kramdown
        write nil
      end

      route '/**/*.md' do
        item.identifier.without_ext + '/index.html'
      end

  #section %h{Filtering}
    #p To filter an item representation, use the %code{filter()} method. It takes the following arguments:

    #ol
      #li (required) the name of the filter (a %code{Symbol})
      #li (optional) additional arguments which will be passed on to the filter

    #p For example, the following rule will filter items with identifiers ending in %code{.md} using the %code{:kramdown} filter, but not perform any layouting, and then write it with a %code{.html} extension, so that %filename{/about.md} is written to %filename{/about.html}:

    #listing[lang=ruby]
      compile '/**/*.md' do
        filter :kramdown
        write @item.identifier.without_ext + '.html'
      end

    #p For example, the following rule calls both the %code{:sass} filter as well as the %code{:relativize_paths} filter with the extra arguments:

    #listing[lang=ruby]
      compile '/**/*.sass' do
        filter :sass, style: :compact
        filter :relativize_paths, type: :css
        write ext: '.css'
      end

  #section %h{Laying out}
    #p To lay out an item representation, use the %code{layout()} method. It takes the following arguments:

    #ol
      #li (required) the identifier of a layout, or a %ref[item=/doc/identifiers-and-patterns.*,frag=patterns]{pattern} that matches the identifier of a layout
      #li (optional) additional arguments which will be passed on to the filter

    #p For example, the following rule will (among other things) lay out the item representation using the layout that matches the %code{/shiny.*} pattern:

    #listing[lang=ruby]
      compile '/about.*' do
        filter :erb
        layout '/shiny.*'
        filter :rubypants
        write @item.identifier.without_ext + '/index.html'
      end

      layout '/*.erb', :erb

    #p The following example is similar, but passes extra arguments (%code{:locals}) to the filter associated with the layout:

    #listing[lang=ruby]
      compile '/about.*' do
        filter :erb
        layout '/shiny.*', locals: { daleks: 'exterminate' %}
        filter :rubypants
        write @item.identifier.without_ext + '/index.html'
      end

      layout '/*.erb', :erb

    #p If %code{layout} is called multiple times, the content is wrapped in each of the specified layouts.  In the example below, markdown articles are filtered through the %code{kramdown} filter, then wrapped in the %code{article.erb} layout, and finally wrapped in the %code{default.erb} layout.

    #listing[lang=ruby]
      compile '/articles/*.md' do
        filter :kramdown
        layout '/article.*'
        layout '/default.*'
      end

      layout '/*.erb', :erb

  #section %h{Dynamic rules}
    #p In the code block, Nanoc exposes %code{@item} and %code{@rep}, among others. See the %ref[item=/doc/reference/variables.*]{Variables} page for details.

    #p The following rule will only invoke the %code{:erb} filter if the itemâ€™s %code{:is_dynamic} attribute is set:

    #listing[lang=ruby]
      compile '/about.*' do
        filter :erb if @item[:is_dynamic]
        write @item.identifier.without_ext + '/index.html'
      end

  #section %h{Creating snapshots}
    #p To take a snapshot of an item representation, call %code{snapshot()} and pass the snapshot name as argument. For example, the following rule will create a snapshot named %code{:without_toc} so that the content at that snapshot can then later be reused elsewhere:

    #listing[lang=ruby]
      compile '/foo/*' do
        filter :markdown
        snapshot :without_toc
        filter :add_toc
        write @item.identifier.without_ext + '/index.html'
      end

  #section %h{Handling non-default representations}
    #p A %code{:rep} argument can be passed to the %code{compile()} call. This argument contains the name of the representation that is generated by this rule. This is %code{:default} by default.

    #p The following rule will generate a %code{:text} representation for all items below %filename{/people}:

    #listing[lang=ruby]
      compile '/people/**/*', rep: :text do
        write @item.identifier.without_ext + '.txt'
      end

  #section %h{Matching with regular expressions}
    #p When using a regular expression to match items, the block arguments will contain all matched groups. This is more useful for routing rules than it is for compilation rules. For example, the following rule will be matched using a regular expression instead of with a wildcard string:

    #listing[lang=ruby]
      compile %%r<\A/blog/\d{4%}/.*> do
        filter :kramdown
        write @item.identifier.without_ext + '/index.html'
      end

#section %h{Routing rules}
  #p Routing rules are an alternative way to specify where a compiled item should be written to. It has the following shape:

  #listing[lang=ruby]
    route '/some/pattern.*' do
      # (routing code here)
    end

  #p The argument for the %code{route()} method call is a %ref[item=/doc/identifiers-and-patterns.*,frag=patterns]{pattern}.

  #p The code block should return the routed path for the relevant item. The code block can return nil, in which case the item will not be written.

  #p A compilation rule that ends with a %code{write()} call can be written as a combination of a compilation rule and a routing rule. Typically, using %code{write()} in the compile block leads to a more compact and easier-to-understand Rules file, but separate %code{route()} calls can nonetheless be useful.

  #p The following compile/route rules are equivalent:

  #listing[lang=ruby]
    compile "/*.md" do
      filter :kramdown
    end

    route "/*.md" do
      item.identifier.without_ext + '/index.html'
    end

  #listing[lang=ruby]
    compile "/*.md" do
      filter :kramdown
      write item.identifier.without_ext + '/index.html'
    end

  #p The following rule will give the item with identifier %filename{/404.erb} the path %filename{/errors/404.php}:

  #listing[lang=ruby]
    route "/404.erb" do
      "/errors/404.php"
    end

  #p The following rule will prevent all items below %filename{/links} from being written:

  #listing[lang=ruby]
    route "/links/**/*" do
      nil
    end

  #p In the code block, Nanoc exposes %code{@item} and %code{@rep}, among others. See the %ref[item=/doc/reference/variables.*]{Variables} page for details.

  #p The following rule will give all identifiers for which no prior matching rule exists a path based directly on its identifier (for example, the item %filename{/foo/bar.html} would get the path %filename{/foo/bar/index.html}):

  #listing[lang=ruby]
    route "/**/*" do
      @item.identifier.without_ext + "/index.html"
    end

  #p When using a regular expression to match items, the block arguments will contain all matched groups.

  #p The following rule will capture regex matches and provide them as block arguments (for example, the item with identifier %filename{/blog/2015-05-19-something.md} will be routed to %filename{/blog/2015/05/something/index.html}):

  #listing[lang=ruby]
    route %%r[/blog/([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)\..*] do |_, y, m, d, slug|
      "/blog/#{y%}/#{m%}/#{slug%}/index.html"
    end

  #p Just like with %code{compile()} calls, a %code{:rep} argument can be passed to the %code{route()} call. This argument contains the name of the representation that this rule applies to.

  #p The following rule will apply to all textual representations of all items below %filename{/people} (for example, the item %filename{/people/denis.md} would get the path %filename{/people/denis.txt}):

  #listing[lang=ruby]
    route "/people/**/*", rep: :text do
      item.identifier.without_ext + '.txt'
    end

  #p When a %code{:snapshot} argument is passed to a routing rule definition, then that routing rule applies to the given snapshot only. The default value for the %code{:snapshot} argument is %code{:last}, meaning that compiled items will only be written once they have been fully compiled.

  #p The following rules will apply to the %code{raw} snapshot of all items below %filename{/people} (for example, the raw snapshot of the item %filename{/people/denis.md} would get the path %filename{/people/denis.txt}):

  #listing[lang=ruby]
    route "/people/**/*", snapshot: :raw do
      item.identifier.without_ext + '.txt'
    end

#section %h{Writing/routing pitfalls}
  #p A %filename{Rules} file that combines %code{write()} calls with routing can be confusing. For this reason, we recommend either using compilation rules that use %code{write()}, %emph{or} routing rules, but not both. This section intends to give more clarity on how %code{write()} calls and routing rules interact.

  #p %strong{The main point}: If a compilation rule does not end with a %code{write()} call, Nanoc will find the routing rule that matches this item representation, and use it to write.

  #p For example, here the routing rule is used for the %identifier{/about.md} item:

  #listing[lang=ruby]
    compile '/about.md' do
      filter :kramdown
    end

    route '/about.md' do
      '/about.html'
    end

    # output files created:
    #   /about.html

  #p In the following example, on the other hand, the routing rule is %emph{not} used, because the compilation rule ends with a %code{write()} call:

  #listing[lang=ruby]
    compile '/about.md' do
      filter :kramdown
      write '/about.html'
    end

    route '/about.md' do
      '/about-irrelevant.html'
    end

    # output files created:
    #   /about.html

  #p In the next example, the routing rule %emph{is} used, because even though there is a %code{write()} call, the compilation rule does not end with one:

  #listing[lang=ruby]
    compile '/about.md' do
      filter :kramdown
      write '/about-inbetween.html'
      layout '/default.*'
    end

    route '/about.md' do
      '/about.html'
    end

    # output files created:
    #   /about-inbetween.html
    #   /about.html

  #p To prevent Nanoc from applying a matching routing rule, call %code{write nil} at the end of a compilation rule. Refer to %ref[frag=prevent-applying-routing-rule]{the paragraph describing %code{write nil}} for details.

  #p To reduce potential confusion, avoid mixing routing rules and %code{write()} calls. Both can be used to specify the path for an item representation, but mixing them will reduce the clarity of the %filename{Rules} file.

#section[id=layouting-rules] %h{Layouting rules}
  #p To specify the filter used for a layout, use the %code{layout()} method. It takes the following arguments:

  #ol
    #li (required) the identifier of a layout, or a %ref[item=/doc/identifiers-and-patterns.*,frag=patterns]{pattern} that matches the identifier of a layout
    #li (required) the identifier of the filter to use (a %code{Symbol})
    #li (optional) additional arguments which will be passed on to the filter

  #p If addition arguments are given to both a layouting rule, as well as a %code{layout()} call for the same layout inside a compilation block, the arguments will be merged.

  #p The following rule will make all layouts use the %code{:erb} filter:

  #listing[lang=ruby]
    layout '/**/*', :erb

  #p The following rule will make all layouts with the %filename{haml} extension use the %code{haml} filter, with an additional %code{format} argument that will be passed to the %code{haml} filter:

  #listing[lang=ruby]
    layout '/*.haml', :haml, format: :html5

  #p The following rule will be applied to all layouts with identifiers starting with a slash followed by an underscore. For example, %filename{/foo.erb} and %filename{/foo/_bar.haml} would not match, but %filename{/_foo.erb}, %filename{/_foo/bar.html}, and even %filename{/_foo/_bar.erb} would:

  #listing[lang=ruby]
    layout %%r{\A/_%}, :erb

  #p In the following example, the layout is filtered using the %code{haml} filter, with arguments %code{ugly: true} and %code{format: :html5}:

  #listing[lang=ruby]
    compile '/*.md' do
      filter :kramdown
      layout '/shiny.*', ugly: true
      write ext: 'html'
    end

    layout '/*.haml', :haml, format: :html5

#section %h{Convenience methods}
  #p The %code{passthrough()} method does no filtering or laying out, and copies the matched item as-is. For example:

  #listing[lang=ruby]
    passthrough '/assets/images/**/*'

  #p This is a shorthand for the following:

  #listing[lang=ruby]
    route '/assets/images/**/*' do
      item.identifier.to_s
    end

    compile '/assets/images/**/*' do
    end

  #p The %code{ignore()} method does no filtering or laying out, and does not write out the matched item. This is useful for items that are only intended to be included in other items. For example:

  #listing[lang=ruby]
    ignore '/assets/style/_*'

  #p This is a shorthand for the following:

  #listing[lang=ruby]
    route '/assets/style/_*' do
      nil
    end

    compile '/assets/style/_*' do
    end

#section %h{Preprocessing}
  #p The %filename{Rules} file can contain a %code{preprocess()} block. This preprocess block is executed before the site is compiled, and has access to all site data (%code{@config}, %code{@items}, and %code{@layouts}). Preprocessors can modify data coming from data sources before it is compiled. It can change item attributes, content, and the path, but also add and remove items.

  #p Here is an example preprocess block that sets the %code{author} attribute to %code{denis} on every HTML document:

  #listing[lang=ruby]
    preprocess do
      @items.each do |item|
        item[:author] = 'denis' if item.identifier.ext == 'html'
      end
    end

  #p Here is an example preprocess block that finds all unique tags, and creates collection pages for them:

  #listing[lang=ruby]
    preprocess do
      tags = @items.flat_map { |i| i[:tags] || [] %}.uniq
      tags.each do |tag|
        content = ''
        attributes = { tag: tag %}
        identifier = "/tags/#{tag%}.erb"
        @items.create(content, attributes, identifier)
      end
    end

  #p To make the tag pages work, youâ€™d handle tag items specifically (using a glob %code{/tags/*} to match them) by applying a layout that finds and shows all items for the tag pageâ€™s tag. Doing this is left as an exercise to the reader.

  #p Preprocessors can be used for various purposes. Here are two sample uses:

  #ul[spacious]
    #li A preprocessor could set a %code{language_code} attribute based on the item path. An item such as %code{/en/about/} would get an attribute %code{language_code} equal to %code{'en'}. This would eliminate the need for helpers such as %code{language_code_of}.

    #li A preprocessor could create new (in-memory) items for a given set of items. This can be useful for creating pages that contain paginated items.

#section %h{Post-processing}
  #p The %filename{Rules} file can contain a %code{postprocess()} block. This post-process block is executed after the site is compiled. At this point, all output files have been updated.

  #p Post-processing is useful to model tasks that are tricky to model in Nanocâ€™s workflow, such as incrementally updating a search index. For example:

  #listing[lang=ruby]
    postprocess do
      items.flat_map(&:modified_reps).each do |rep|
        update_search_index(rep.path, rep.compiled_content(snapshot: :last))
      end
    end
