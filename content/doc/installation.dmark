---
title: "Installation"
nav_title: "Install"
---

#p Install Nanoc using RubyGems:

#listing
  %prompt{%%} %kbd{gem install nanoc}

#note %entity{sudo-gem-install}

#p For detailed installation instructions, read on.

#section %h{Ruby 3.x}
  #p On Ruby 3.0 and later, you might get this error error when running %command{nanoc view}:

  #listing
    LoadError: Couldn't find handler for: puma, thin, falcon, webrick.

  #p This happens because Ruby 3.0 and later does not come with WEBrick by default, while older Ruby versions (2.x) do.

  #p To resolve this, add WEBrick to your %filename{Gemfile}. You can do so by running the %kbd{bundle add webrick} command. If you happen to not use Bundler and thus have no %filename{Gemfile}, you can install WEBrick using %kbd{gem install webrick}.

#section %h{Compatibility guarantees}
  #p Nanoc guarantees backwards compatibility within the same major version, starting from Nanoc 3.0 (released in 2009). This means that it is possible to upgrade from any 4.x to any newer 4.x version without extra work.

  #p We recommend specifying the version of Nanoc using the %code{~>} operator in the %filename{Gemfile}, and specifying only the major and minor version. For example:

  #listing[lang=ruby]
    gem 'nanoc', '~> %erb{config[:nanoc_version_info_major_minor]}'

  #p This version constraint tells Bundler to use at least Nanoc version %erb{config[:nanoc_version_info_major_minor]}, but never upgrade beyond version %erb{config[:nanoc_version_info_major]}. This way, running %kbd{bundle update nanoc} will upgrade Nanoc to the last compatible version.

  #p We recommend updating Nanoc regularly. New versions not only come with new features, but also with bug fixes and performance improvements that continuously make Nanoc more enjoyable to use.

#section %h{Supported platforms}
  #p Language version: %strong{Ruby 3.1 or higher}. Nanoc might run fine on older versions, but there are no guarantees that it will.

  #p Implementation: %strong{CRuby}. Alternative Ruby interpreters, such as JRuby and Rubinius, might be able to run Nanoc, but there are no guarantees that they will be able to do so properly.

  #p Operating system: %strong{macOS, Linux}. Nanoc runs mostly fine on Windows, with some limitations. Windows is not officially supported at this point, but that is being worked on.

#section %h{Installing Ruby}
  #p Nanoc requires %ref[url=https://www.ruby-lang.org/]{Ruby} to run. Nanoc supports the official Ruby interpreter from version 2.5 up.

  #p Ruby may already be installed on your system. To check, open a terminal window and type %kbd{ruby --version}. If you get “command not found”, Ruby is not yet installed. Otherwise, you will see which version of Ruby you have:

  #listing
    %prompt{%%} %kbd{ruby --version}
    %erb{config[:ruby_version_info]}
    %prompt{%%}

  #p To install Ruby, follow the %ref[url=https://www.ruby-lang.org/en/documentation/installation/]{installation instructions on the Ruby website}.

#section %h{Installing Nanoc}
  #p All dependencies are now taken care of, and you can now install Nanoc itself:

  #listing
    %prompt{%%} %kbd{gem install nanoc}

  #note %entity{sudo-gem-install}

  #p To make sure that Nanoc was installed correctly, run %kbd{nanoc --version}. It should print the version number along with some other information, like this:

  #listing
    %prompt{%%} %kbd{nanoc --version}
    %erb{config[:nanoc_version_info]}
    %prompt{%%}

  #p If you get a “command not found” error when trying to run %command{nanoc}, you might have to adjust your %code{$PATH} to include the path to the directory where RubyGems installs executables.

  #p The current version of Nanoc is %erb{latest_release_info[:version]}, released on %erb{latest_release_info[:date].format_as_date}. You can find the release notes for this version as well as release notes for older versions on %ref[item=/release-notes.*]{}.

  #p If you’re on Windows and are using the Windows console, it’s probably a good idea to install the %productname{win32console} gem using %kbd{gem install win32console} to allow Nanoc to use pretty colors when writing stuff to the terminal.
