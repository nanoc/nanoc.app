---
title: "Checking correctness of Nanoc sites"
short_title: "Checking"
---

#p Nanoc comes with tooling for ensuring that your site has no errors, such as broken links, stale files in the output directory, and mixed HTTP/HTTPS content. Such checks can be run:

#ul
  #li manually, using the %command{check} command
  #li automatically, as part of the deployment process (invoked by the %command{deploy} command)

#section %h{Running checks manually}
  #p To run a single check, run the %command{check} with the name of the check as an argument:

  #listing
    %prompt{%%} %kbd{nanoc check ilinks}
    Loading site data… done
      Running internal_links check…   %log-check-ok{ok}

#section %h{Running checks before deploying}
  #p Specify the list of checks to run before deploying in the %code{enabled_checks} array within the %code{checking} section of the configuration file (%filename{nanoc.yaml}):

  #listing[lang=yaml]
    checking:
      enabled_checks:
        - internal_links
        - stale

  #p The example above prevents the Nanoc site from being deployed if there are broken internal links or stale files in the output directory.

  #note
    #p Deploy-time checks can also be configured in a file named %filename{Checks} in the site directory. To configure a check to be run before deploying, call %code{deploy_check()} with name of the check:

    #listing[lang=ruby]
      deploy_check :internal_links
      deploy_check :stale

    #p Use of the %filename{Checks} file is discouraged, however.

  #p Here’s what a %kbd{nanoc deploy} looks like when all checks pass:

  #listing
    %prompt{%%} %kbd{nanoc deploy}
    Loading site data… done
    Running issue checks…
      Running internal_links check…   %log-check-ok{ok}
      Running stale check…            %log-check-ok{ok}
    No issues found. Deploying!
    %prompt{%%}

  #p Here’s what a %kbd{nanoc deploy} looks like when some checks fail:

  #listing
    %prompt{%%} %kbd{nanoc deploy}
    Loading site data… done
    Running issue checks…
      Running check internal_links…   %log-check-error{error}
      Running check stale…            %log-check-ok{ok}
    Issues found!
      output/doc/guides/unit-testing-nanoc-sites/index.html:
        [ %log-check-error{ERROR} ] internal_links - broken reference to ../../api/Nanoc/Site.html
    Issues found, deploy aborted.
    %prompt{%%}

  #p You can also run %kbd{nanoc check} to run all enabled checks.

#section %h{Defining custom checks}
  #p To define a custom check, use %code{Nanoc::Check.define}, somewhere in the %filename{lib/} directory:

  #listing[lang=ruby]
    Nanoc::Check.define(:no_unprocessed_erb) do
      @output_filenames.each do |filename|
        if filename =~ /html$/ && File.read(filename).match(/<%%/)
          add_issue("unprocessed erb detected", subject: filename)
        end
      end
    end

  #p In a custom check, you can use %code{add_issue()}. The first argument is the description of the problem, and the %code{:subject} option defines the location of the problem (usually a filename).

  #p In a custom check, the variables %code{@config}, %code{@items}, and %code{@layouts} are available, in addition to %code{@output_filenames}, which is the collection of filenames in the output directory that correspond to an item in the site. For details, see %ref[item=/doc/reference/variables.*]{}.

  #note
    #p Custom checks can also be defined in a file named %filename{Checks} in the site directory. To define a check in this way, call the %code{check()} method with the name of the check, and a block:

    #listing[lang=ruby]
      check :no_unprocessed_erb do
        @output_filenames.each do |filename|
          if filename =~ /html$/ && File.read(filename).match(/<%%/)
            add_issue("unprocessed erb detected", subject: filename)
          end
        end
      end

    #p Use of the %filename{Checks} file is discouraged, however.

#section %h{Available checks}
  #p Nanoc comes with the following checks:

  #dl
    #dt %code{css}
    #dd verifies that the CSS is valid

    #dt %code{html}
    #dd verifies that the HTML is valid

    #dt %code{external_links}
    #dt %code{elinks}
    #dd verifies that external links are correct

    #dt %code{internal_links}
    #dt %code{ilinks}
    #dd verifies that internal links are correct

    #dt %code{stale}
    #dd verifies whether no non-Nanoc items are in the output directory

    #dt %code{mixed_content}
    #dd verifies that no content is included or linked to from a potentially insecure source
