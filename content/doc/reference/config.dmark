---
title: "Configuration"
---

#section %h[id=text-extensions]{%code{text_extensions}}
  #p A list of file extensions that Nanoc will consider to be textual rather than binary. If an item with an extension not in this list is found, the file will be considered as binary.

  #listing[lang=yaml]
    text_extensions: %erb{array_to_yaml(Nanoc::Core::Configuration::DEFAULT_CONFIG[:text_extensions])}

#section %h{%code{output_dir}}
  #p The path to the directory where all generated files will be written to. This can be an absolute path starting with a slash, but it can also be a path relative to the site directory.

  #listing[lang=yaml]
    output_dir: %erb{Nanoc::Core::Configuration::DEFAULT_CONFIG[:output_dir]}

#section %h{%code{index_filenames}}
  #p A list of index filenames, i.e. names of files that will be served by a web server when a directory is requested. Usually, index files are named %filename{index.html}, but depending on the web server, this may be something else, such as %filename{default.html}. This list is used by Nanoc to generate pretty URLs.

  #listing[lang=yaml]
    index_filenames: %erb{array_to_yaml(Nanoc::Core::Configuration::DEFAULT_CONFIG[:index_filenames])}

#section %h{%code{enable_output_diff}}
  #p Whether or not to generate a diff of the compiled content when compiling a site. The diff will contain the differences between the compiled content before and after the last site compilation.

  #listing[lang=yaml]
    enable_output_diff: false

#section %h{%code{prune}}
  #p The %code{prune} section contains options for the %ref[item=/doc/reference/commands.*,frag=prune]{prune} command, which deletes stray files from the output directory.

  #listing[lang=yaml]
    prune:
      auto_prune: true
      exclude: [ '.git', '.hg', '.svn', 'CVS' ]

  #p When %code{auto_prune} is true, Nanoc will automatically remove files not managed by Nanoc from the output directory.

  #p The %code{exclude} option determines which files and directories you want to exclude from pruning. If you version your output directory, you should probably exclude VCS directories such as %filename{.git} or %filename{.hg}.

#section %h{%code{commands_dirs}}
  #p Directories to read commands from. This is useful when you have a set of commands that you want to share between sites. Paths that start with a %code{~} will be expanded to the current user’s home directory.

  #listing[lang=yaml]
    commands_dirs: [ '../shared-commands' ]

#section %h{%code{lib_dirs}}
  #p Directories to read code snippets from. This is useful when you have a set of code snippets that you want to share between sites. Paths that start with a %code{~} will be expanded to the current user’s home directory.

  #listing[lang=yaml]
    lib_dirs: [ 'lib', '../shared-lib' ]

#section %h{%code{data_sources}}
  #p The data sources configuration contains the definition of the data sources of this site. It is a list of hashes with keys described in the sections below; each array element represents a single data source. For example:

  #listing[lang=yaml]
    data_sources:
      -
        type: pentabarf # a custom data source
        items_root: /conference/

  #p For details, see %ref[item=/doc/data-sources.*]{}.

#section %h{%code{string_pattern_type}}
  #p Sets the type of string pattern to use. Can be %code{glob} or %code{legacy}. See %ref[item=/doc/identifiers-and-patterns.*]{} for details.

  #listing[lang=yaml]
    string_pattern_type: glob

#section %h{%code{checks}}
  #p The %code{checks} section contains the configuration for individual checks.

  #section %h{%code{all}}
    #p Defines common configuration for all checks.

    #dl
      #dt %code{exclude_files} (default: empty array)
      #dd A list of file patterns, specified as regular expressions, to exclude from the check. If a file matches this pattern, the links from this file will not be checked.

    #p For example, the following will cause no checks to be run on %filename{external/bad.html} nor on %filename{external/worse.html}:

    #listing[lang=yaml]
      checks:
        all:
          exclude_files:
            - external/bad.html
            - external/worse.html

  #section %h{%code{internal_links}}
    #p Defines the configuration for the %code{internal_links} check.

    #dl
      #dt %code{exclude} (default: empty array)
      #dd A list of patterns, specified as regular expressions, to exclude from the check. If an internal link matches this pattern, the validity check will be skipped.

    #p For example, the following will exclude all links starting with %code{/server_status} from being marked as broken:

    #listing[lang=yaml]
      checks:
        internal_links:
          exclude: ['^/server_status']

  #section %h{%code{external_links}}
    #p Defines the configuration for the %code{external_links} check.

    #dl
      #dt %code{exclude} (default: empty array)
      #dd A list of patterns, specified as regular expressions, to exclude from the check. If an external link matches this pattern, the validity check will be skipped.

      #dt %code{exclude_files} (default: empty array)
      #dd A list of file patterns, specified as regular expressions, to exclude from the check. If a file matches this pattern, the links from this file will not be checked.

      #dt %code{user_agent} (default: %code{"Mozilla/5.0 Nanoc/%erb{config[:nanoc_version_info_major_minor_patch]} (link rot checker)"})
      #dd The user agent to use when making HTTP requests.

    #p For example, the following will exclude all links to %code{example.com}, as well as all links on %code{blog/page}, from being marked as broken:

    #listing[lang=yaml]
      checks:
        external_links:
          exclude: ['^https?://example.com/']
          exclude_files: ['blog/page']
