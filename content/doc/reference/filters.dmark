---
title: "Filters"
---

#p The following is a list of all filters that come bundled with Nanoc.

#section %h{%code{:asciidoc}}
  #p The %code{:asciidoc} filter invokes the command-line tool of %ref[url=https://asciidoc.org/]{AsciiDoc}. This filter takes no options.

  #p For example, the following will convert an AsciiDoc page to HTML:

  #listing[lang=ruby]
    filter :asciidoc

#section %h{%code{:asciidoctor}}
  #p The %code{:asciidoctor} filter invokes %ref[url=https://asciidoctor.org/]{Asciidoctor}, a Ruby implementation of AsciiDoc. Unlike the %code{:asciidoc} filter, the %code{:asciidoctor} filter can be customized.

  #p For example, the following will convert an AsciiDoc page to HTML:

  #listing[lang=ruby]
    filter :asciidoctor

#section %h{%code{:bluecloth}}
  #p The %code{:bluecloth} filter invokes %ref[url=https://github.com/ged/bluecloth]{BlueCloth}, a pure-Ruby implementation of %ref[url=https://en.wikipedia.org/wiki/Markdown]{Markdown}. This filter takes no options.

  #p For example, the following will convert a Markdown page to HTML:

  #listing[lang=ruby]
    filter :bluecloth

#section %h{%code{:coffeescript}}
  #p The %code{:coffeescript} filter runs the content through %ref[url=https://coffeescript.org/]{CoffeeScript}. This filter takes no options.

  #p For example, the following will convert CoffeeScript source code into JavaScript:

  #listing[lang=ruby]
    filter :coffeescript

#section %h{%code{:colorize_syntax}}
  #p The %code{:colorize_syntax} filter finds code blocks and attempts to syntax-highlight them.

  #p Code blocks are %code{code} elements wrapped in a %code{pre} element. The language of the code can be specified in two ways:

  #dl
    #dt as an attribute
    #dd
      #p If the %code{code} element has an HTML class attribute that starts with %code{language-}, then the remainder of the class attribute will be used as the code language. For example, the following indicates a code block written in Ruby:
      #listing[lang=html]
        <pre><code class="language-ruby">puts "Hello world!"</code></pre>

    #dt as a code comment
    #dd
      #p If the code block starts with a line that begins with %code{#!}, then the remainder of the line will be used as the code language. For example, the following indicates a code block written in JSON:
      #listing[lang=html]
        <pre><code>#!json
        {"greeting":"Hello, world!"%}
        </code></pre>

  #p By default, %ref[url=http://coderay.rubychan.de/]{CodeRay} will be used to highlight source code. For example, the following will colorize the syntax of all code blocks using CodeRay:

  #listing[lang=ruby]
    filter :colorize_syntax

  #p To change the colorizer, pass a symbol containing the name of a colorizer to %code{:default_colorizer}. For example, the following highlights all code blocks using %ref[url=https://github.com/rouge-ruby/rouge]{Rouge}:

  #listing[lang=ruby]
    filter :colorize_syntax, default_colorizer: :rouge

  #p Nanoc knows the following colorizers:

  #dl
    #dt %code{:coderay}
    #dd %ref[url=http://coderay.rubychan.de]{CodeRay}, a Ruby syntax highlighter

    #dt %code{:pygmentize}
    #dd %ref[url=http://pygments.org/docs/cmdline]{%command{pygmentize}}, the command-line front end for %ref[url=http://pygments.org]{Pygments}, a syntax highlighter written in Python

    #dt %code{:pygmentsrb}
    #dd %ref[url=https://github.com/tmm1/pygments.rb]{%productname{pygments.rb}}, a fast Ruby interface for %ref[url=http://pygments.org]{Pygments}

    #dt %code{:simon_highlight}
    #dd %ref[url=http://www.andre-simon.de/doku/highlight/en/highlight.php]{Highlight}, by Andre Simon

    #dt %code{:rouge}
    #dd %ref[url=https://github.com/rouge-ruby/rouge]{Rouge}, a pure-Ruby syntax highlighter with Pygments-compatible output

  #p To configure individual highlighters, pass the options to the key for the highlighter. For example, the following will set the %code{line_numbers} option to %code{:table} for CodeRay:

  #listing[lang=ruby]
    filter :colorize_syntax, coderay: { line_numbers: :table %}

  #p Syntax colorizers can be configured on a per-language basis. To do so, use a %code{:colorizers} option, passing in a hash where the keys are symbols corresponding to language names, and where the values are symbols corresponding to colorizer names. For example, in the following code snippet, Rouge would be used by default, except for XML, where it uses CodeRay:

  #listing[lang=ruby]
    filter :colorize_syntax,
      default_colorizer: :rouge,
      colorizers: { xml: :coderay %}

  #p The %code{colorize_syntax} filter by default assumes that the content to colorize is an HTML page %emph{fragment}, rather than a full HTML page, and will therefore not add the HTML boilerplate at the top and bottom of the output. To rather treat the content as a full page, pass %code{is_fullpage: true} to the filter. Typically, the %code{is_fullpage: true} option is useful when the content is already fully laid out.

  #p The syntax of the document to highlight is assumed to be HTML by default. To parse the document as HTML5 instead, pass %code{syntax: :html5} to the %code{#filter} function. XHTML and XML are also available.

  #p If you want to highlight %code{code} elements even when they are not contained inside a %code{pre} element, pass %code{outside_pre: true}.

#section %h{%code{:erb}}
  #p The %code{:erb} filter runs the content through %ref[url=https://en.wikipedia.org/wiki/ERuby]{eRuby}, using the %ref[url=http://ruby-doc.org/stdlib-2.3.0/libdoc/erb/rdoc/ERB.html]{%code{ERB}} class.

  #p For example, the following will process ERB source code:

  #listing[lang=ruby]
    filter :erb

  #p The following example contains ERB code that iterates over all blog posts, and prints them as a header and an excerpt of the body:

  #listing[lang=rhtml]
    <%% @items.find_all('/blog/*').each do |post| %%>
      <h2><%%= post[:title] %%></h2>
      <p><%%= excerpt(post.compiled_content(snapshot: :pre)) %%></p>
    <%% end %%>

  #p ERB supports the following syntax:

  #dl
    #dt %code{<%% %var{statement} %%>}
    #dd Evaluates %var{statement}, and discards the result.

    #dt %code{<%%= %var{expression} %%>}
    #dd Evaluates %var{expression}, and substitutes the ERB instruction with the result of the expression.

  #section %h{Options}
    #p The %code{:erb} filter takes the following options:

    #dl
      #dt %code{:safe_level}
      #dd
        #p The safe level (%code{$SAFE}) to use while running this filter. By default, this is 0, which means no taint checks are performed.

      #dt %code{:trim_mode}
      #dd
        #p The trim mode to use, which changes the way ERB interprets its source. The %ref[url=http://ruby-doc.org/stdlib-2.3.0/libdoc/erb/rdoc/ERB.html]{ERB documentation} lists the following trim modes:

        #dl
          #dt %code{"%%"}
          #dd enables Ruby code processing for lines beginning with %code{%%}

          #dt %code{"<>"}
          #dd omit newline for lines starting with %code{<%%} and ending in %code{%%>}

          #dt %code{">"}
          #dd omit newline for lines ending in %code{%%>}

          #dt %code{"-"}
          #dd omit blank lines ending in %code{-%%>}

        #p For example, with %code{trim_mode: '%%'}, the initial ERB example above could be written as follows:

        #listing[lang=rhtml]
          %% @items.find_all('/blog/*').each do |post|
            <h2><%%= post[:title] %%></h2>
            <p><%%= excerpt(post.compiled_content(snapshot: :pre)) %%></p>
          %% end

        #p For this to work, the %code{:erb} filter would have to be called with the proper trim mode set:

        #listing[lang=ruby]
          filter :erb, trim_mode: '%%'

#section %h{%code{:erubi}}
  #p The %code{:erubi} filter runs the content through %ref[url=https://en.wikipedia.org/wiki/ERuby]{eRuby}, using %ref[url=https://github.com/jeremyevans/erubi]{Erubi}. Options passed to this filter will be passed on to %code{Erubi::Engine.new}.

  #p For example, the following will process eRuby source code using Erubi:

  #listing[lang=ruby]
    filter :erubi

#section %h{%code{:erubis}}
  #p The %code{:erubis} filter runs the content through %ref[url=https://en.wikipedia.org/wiki/ERuby]{eRuby}, using %ref[url=http://www.kuwata-lab.com/erubis/]{Erubis}. This filter takes no options.

  #p For example, the following will process eRuby source code using Erubis:

  #listing[lang=ruby]
    filter :erubis

#section %h{%code{:haml}}
  #p The %code{:haml} filter runs the content through %ref[url=http://haml.info/]{Haml}.

  #p For example, the following will convert Haml into HTML:

  #listing[lang=ruby]
    filter :haml

  #p The options that are given to this filter will be passed on to %code{Haml::Engine#initialize}. For example, this filter call set %code{:format} to %code{:html5}:

  #listing[lang=ruby]
    filter :haml, format: :html5

#section %h{%code{:handlebars}}
  #p The %code{:handlebars} filter processes %ref[url=http://handlebarsjs.com/]{Handlebars} code using %ref[url=https://github.com/cowboyd/handlebars.rb]{%productname{handlebars.rb}}.

  #p For example, the following will convert Handlebars content into HTML:

  #listing[lang=ruby]
    filter :handlebars

  #p Content that is processed using the Handlebars filter can access the following data:

  #dl
    #dt %code{item.%var{attr}}
    #dt %code{%var{attr}}
    #dd Returns the item attribute with the given name. For example, %code{{{ item.title %}%}} and %code{{{ title %}%}} in Handlebars are both evaluated as %code{<%%= item[:title] %%>} in ERB.

    #dt %code{layout.%var{attr}}
    #dd Returns the layout attribute with the given name. This is only available in layouts. For example, %code{{{ layout.title %}%}} in Handlebars is evaluated as %code{<%%= layout[:title] %%>} in ERB.

    #dt %code{config.%var{attr}}
    #dd Returns the configuration attribute with the given name.

    #dt %code{yield}
    #dd Returns the content to be included in the layout. This is only available in layouts.

  #p For example, this is a basic layout marked up with Handlebars:

  #listing[lang=html]
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <title>{{ config.site_title %}%}: {{ item.title %}%}</title>
      </head>
      <body>
        <h1>{{ item.title %}%}</h1>
        {{{ yield %}%}%}
      </body>
    </html>

  #p This filter does not have any options.

#section %h{%code{:kramdown}}
  #p The %code{:kramdown} filter invokes %ref[url=https://kramdown.gettalong.org/]{kramdown}, a fast and featureful pure-Ruby implementation of %ref[url=https://en.wikipedia.org/wiki/Markdown]{Markdown}. The filter converts to HTML.

  #p For example, the following will convert a Markdown page to HTML:

  #listing[lang=ruby]
    filter :kramdown

  #p Parameters that are passed to the filter are passed to %code{Kramdown::Document.new}. For example, the following will also convert the content to HTML, as above, but disables the %code{auto_ids} option:

  #listing[lang=ruby]
    filter :kramdown, auto_ids: false

  #p For a list of all options for kramdown, see %ref[url=https://kramdown.gettalong.org/options.html]{kramdown’s options reference page}.

#section %h{%code{:less}}
  #p The %code{:less} filter runs content through %ref[url=http://lesscss.org/]{Less}, a CSS preprocessor.

  #p For example, the following will process Less content:

  #listing[lang=ruby]
    filter :less

  #p This filter does not have any options.

#section %h{%code{:markaby}}
  #p The %code{:markaby} filter runs content through %ref[url=http://markaby.github.io/]{Markaby}, a method of writing markup as Ruby.

  #p For example, the following will process Markaby content:

  #listing[lang=ruby]
    filter :markaby

  #p This filter does not have any options.

#section %h{%code{:maruku}}
  #p The %code{:maruku} filter runs content through %ref[url=https://github.com/bhollis/maruku/]{Maruku}, a pure-Ruby Markdown-superset interpreter.

  #p For example, the following will process Markdown content using Maruku:

  #listing[lang=ruby]
    filter :maruku

  #p The options that are passed to this filter will be passed on to Maruku’s %code{Maruku.new} method.

#section %h{%code{:mustache}}
  #p The %code{:mustache} filter runs content through %ref[url=https://github.com/mustache/mustache]{Mustache}.

  #p For example, the following will convert Mustache content into HTML:

  #listing[lang=ruby]
    filter :mustache

  #p Content that is processed using the Handlebars filter can access the following data:

  #dl
    #dt %code{%var{attr}}
    #dd Returns the item attribute with the given name. For example, %code{{{ title %}%}} in Handlebars is evaluated as %code{<%%= item[:title] %%>} in ERB.

    #dt %code{yield}
    #dd Returns the content to be included in the layout. This is only available in layouts.

  #p For example, this is a basic layout marked up with Mustache:

  #listing[lang=html]
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <title>{{ title %}%}</title>
      </head>
      <body>
        <h1>{{ title %}%}</h1>
        {{{ yield %}%}%}
      </body>
    </html>

  #p This filter does not have any options.

#section %h{%code{:pandoc}}
  #p The %code{:pandoc} filter runs content through %ref[url=https://pandoc.org]{Pandoc} using %ref[url=https://github.com/alphabetum/pandoc-ruby]{PandocRuby}.

  #p For example, the following will convert Pandoc content into HTML:

  #listing[lang=ruby]
    filter :pandoc

  #p To pass options to %code{:pandoc} filter, pass them as an array for the %code{:args} key. For example, the following will convert from Markdown to HTML, and enable the %code{--no-wrap} and %code{--table-of-contents} options:

  #listing[lang=ruby]
    filter :pandoc, args: [
      { from: :markdown, to: :html %},
      'no-wrap',
      :table_of_contents,
    ]

  #note
    #p For backwards compatibility, it is also possible to pass options directly as a hash to the %code{:pandoc} filter. For example:

    #listing[lang=ruby]
      filter :pandoc, from: :markdown, to: :html

    #p This approach is less flexible, however, as it is not capable of passing options without values, such as the %code{--no-wrap} and %code{--table-of-contents} options in the example above.

#section %h{%code{:rainpress}}
  #p The %code{:rainpress} filter runs CSS through %ref[url=https://github.com/ddfreyne/rainpress]{Rainpress}, a CSS compressor.

  #p For example, the following will compress CSS with Rainpress:

  #listing[lang=ruby]
    filter :rainpress

  #p Options passed to this filter will be passed to Rainpress. See the %ref[url=https://github.com/ddfreyne/rainpress/blob/master/lib/rainpress.rb]{%filename{rainpress.rb}} file for a description of the options. For example, the following will retain newlines:

  #listing[lang=ruby]
    filter :rainpress, newlines: false

#section %h{%code{:rdiscount}}
  #p The %code{:rdiscount} filter runs content through %ref[url=https://github.com/davidfstr/rdiscount]{RDiscount}, a Ruby interface to %ref[url=https://github.com/Orc/discount]{Discount}.

  #p For example, the following will convert Markdown content into HTML using RDiscount:

  #listing[lang=ruby]
    filter :rdiscount

  #p Options can be passed as an array of symbols for the %code{:extension} key. For example, the following will convert from Markdown to HTML, and enable the %code{:smart} and %code{:filter_html} options:

  #listing[lang=ruby]
    filter :rdiscount, extensions: [:smart, :filter_html]

#section %h{%code{:rdoc}}
  #p The %code{:rdoc} filter runs content through %ref[url=http://docs.seattlerb.org/rdoc/RDoc/Markup.html]{%code{RDoc::Markup}}.

  #p For example, the following will convert RDoc content into HTML:

  #listing[lang=ruby]
    filter :rdoc

  #p This filter takes no options.

#section %h{%code{:redcarpet}}
  #p The %code{:redcarpet} filter runs content through %ref[url=https://github.com/vmg/redcarpet]{Redcarpet}.

  #p For example, the following will convert Markdown content into HTML via Redcarpet:

  #listing[lang=ruby]
    filter :redcarpet

  #p This filter takes the following options:

  #dl
    #dt %code{:options}
    #dd A list of options to pass on to Redcarpet itself (not the renderer)

    #dt %code{:renderer_options}
    #dd A list of options to pass on to the Redcarpet renderer

    #dt %code{:renderer}
    #dd The class of the renderer to use (%code{Redcarpet::Render::HTML} by default)

    #dt %code{:with_toc}
    #dd Whether or not to add a table of contents

  #p For example, the following will enable fenced code blocks:

  #listing[lang=ruby]
    filter :redcarpet, options: { fenced_code_blocks: true %}

#section %h{%code{:redcloth}}
  #p The %code{:redcloth} filter runs content through %ref[url=http://redcloth.org]{RedCloth}, a Ruby implementation of %ref[url=https://textile-lang.com]{Textile}.

  #p For example, the following will convert Textile content into HTML via RedCloth:

  #listing[lang=ruby]
    filter :redcloth

  #p This filter takes the following options:

  #ul
    #li %code{:filter_class}
    #li %code{:filter_html}
    #li %code{:filter_ids}
    #li %code{:filter_style}
    #li %code{:hard_breaks}
    #li %code{:lite_mode}
    #li %code{:no_span_caps}
    #li %code{:sanitize_html}

  #p Set the value for the option key to %code{true} or %code{false} to enable or disable the option. For details, see %ref[url=https://www.rubydoc.info/github/jgarber/redcloth/RedCloth/TextileDoc]{the documentation for %code{RedCloth::TextileDoc}}.

  #p For example, the following disable wrapping caps in a span:

  #listing[lang=ruby]
    filter :redcloth, no_span_caps: true

#section %h{%code{:relativize_paths}}
  #p The %code{:relativize_paths} filter finds all absolute paths in (X)HTML or CSS content, and converts them into relative paths. This is particularly useful for sites that are not deployed at the root of a domain.

  #p For example, the GitHub Pages site for %ref[url=https://ddfreyne.github.io/d-mark/]{D★Mark} is hosted at %uri{https://ddfreyne.github.io/d-mark/}. The D★Mark page has a reference to its stylesheet at %filename{/assets/style.css}, which the %code{:relativize_paths} filter turns into %filename{assets/style.css}, so that the stylesheet can be found even if the site is not deployed at the root of the domain.

  #p The %code{:type} option specifies the type of content, and can be %code{:html5}, %code{:html}, %code{:xhtml}, %code{:xml}, or %code{:css}. This option must be specified, as the filter cannot reliably determine the type of content by itself.

  #p For example, the following will convert all absolute paths in HTML content to relative ones:

  #listing[lang=ruby]
    filter :relativize_paths, type: :html5

  #p In HTML, all %code{href} and %code{src} attributes will be relativized. In CSS, all %code{url()} references will be relativized.

  #p To customize which attributes to normalize in (X)HTML, pass a list of XPath selectors to the %code{:select} option. Selectors are prefixed with %code{descendant-or-self::} automatically. For example, the following will only relativize paths if they occur within %code{href} attributes on any element anywhere in the document:

  #listing[lang=ruby]
    filter :relativize_paths, type: :html5, select: ['*/@href']

  #p If custom namespaces in XHTML are passed to the %code{:select} option, they also have to be explicitly defined in the %code{:namespaces} option. The %code{:namespaces} option is a hash where the keys are the prefixes, and the values are the namespace URIs.

  #p To exclude paths from being relativized, use the %code{:exclude} option. The value of the %code{:exclude} option can be any of the following:

  #dl
    #dt %code{Regexp} (regular expression)
    #dd The path will not be relativized if the regular expression matches.

    #dt %code{String}
    #dd The path will not be relativized when the path starts with one or more components that matches the given string.

    #dt Array of %code{Regexp} or %code{String}
    #dd The path will not be relativized if any of the elements of the array match, using the aforementioned rules for %code{Regexp} and %code{String}.

  #p For example, the following will prevent all paths to %filename{/cgi-bin} from being relativized:

  #listing[lang=ruby]
    filter :relativize_paths, type: :html5, exclude: '/cgi-bin'

#section %h{%code{:rubypants}}
  #p The %code{:rubypants} filter transforms content using %ref[url=https://www.rubydoc.info/gems/rubypants/]{RubyPants}, which translates plain ASCII punctuation characters into “smart” typographic punctuation HTML entities.

  #p The following will run RubyPants:

  #listing[lang=ruby]
    filter :rubypants

  #p This filter takes no options.

#section %h{%code{:sass}}
  #p The %code{:sass} filter converts a %ref[url=https://sass-lang.com/]{Sass} stylesheet to CSS. For example:

  #listing[lang=ruby]
    filter :sass

  #p The options that are given to this filter will be passed on to %code{Sass::Engine#initialize}, to the exception of the %code{sourcemap_path} option. For example, this filter call set %code{:style} to %code{:compact}:

  #listing[lang=ruby]
    filter :sass, style: :compact

  #p You can evaluate Ruby code from within your Sass code using the %code{nanoc()} Sass function. It takes a string containing Ruby code (a %code{Sass::Script::Value::String}):

  #listing[lang=sass]
    /* This is the input Sass code */
    .title {
      content: nanoc('@config[:title]');
    %}

  #listing[lang=yaml]
    # nanoc.yaml
    title: "My wonderful web site"

  #listing[lang=css]
    /* This is the resulting CSS */
    .title {
      content: "My wonderful web site";
    %}

  #p The %code{nanoc()} Sass function can also take an %code{$unquote} parameter, which removes quotation marks:

  #listing[lang=sass]
    /* This is the input Sass code */
    .tip {
      color: nanoc('@config[:tip_color]', $unquote: true);
    %}

  #listing[lang=yaml]
    # nanoc.yaml
    tip_color: '#990099'

  #listing[lang=css]
    /* This is the resulting CSS */
    .tip {
      color: #990099;
    %}

#section %h{%code{:sass_sourcemap}}
  #p The %code{:sass_sourcemap} filter produces a source map for a rendered %ref[url=https://sass-lang.com/]{Sass} stylesheet. For example:

  #listing[lang=ruby]
    path = @item.identifier.without_ext + '.css'
    filter :sass_sourcemap, css_path: path, sourcemap_path: path + '.map'

  #p Both %code{:sass} and %code{:sass_sourcemap} filters must be passed the same options.

#section %h{%code{:slim}}
  #p The %code{:slim} filter runs the content through %ref[url=http://slim-lang.com/]{Slim}, a lightweight templating engine. For example:

  #listing[lang=ruby]
    filter :slim

  #p Options passed to this filter will be passed to %code{Slim::Template#initialize}.

#section %h{%code{:typogruby}}
  #p The %code{:typogruby} filter runs the content through %ref[url=https://avdgaag.github.io/typogruby/]{Typogruby}, a Ruby variant of %ref[url=https://code.google.com/archive/p/typogrify/]{Typogrify} for typographically enhancing text. For example:

  #listing[lang=ruby]
    filter :typogruby

  #p This filter takes no options.

#section %h{%code{:uglify_js}}
  #p The %code{:uglify_js} filter passes JavaScript content through %ref[url=https://github.com/lautis/uglifier]{Uglifier}, a Ruby wrapper for %ref[url=https://github.com/mishoo/UglifyJS2/]{UglifyJS}. For example:

  #listing[lang=ruby]
    filter :uglify_js

  #p This filter takes options and passes them on to %code{Uglifier#initialize}. For example, the following will disable name mangling and enable support for Harmony mode (ES6/ES2015+):

  #listing[lang=ruby]
    filter :uglify_js, mangle: false, harmony: true

#section %h{%code{:xsl}}
  #p The %code{:xsl} filter runs the item content through an %ref[url=https://www.w3.org/TR/xslt/all/]{XSLT} stylesheet using %ref[url=https://nokogiri.org/]{Nokogiri}.

  #p This filter can only be run for layouts, because it will need both the XML to convert (the item content) as well as the XSLT stylesheet (the layout content).

  #p For example, the following specifies that items matching %glob{/reports/*} will be laid out with the %glob{/xsl-report.*} layout, which is defined to be filtered with XSL:

  #listing[lang=ruby]
    compile '/reports/*' do
      layout '/xsl-report.*'
    end

    layout '/xsl-report.*', :xsl

  #p Additional parameters can be passed to the layout call. These parameters will be turned into %code{xsl:param} elements. For example, the following layout rule adds an additional parameter named %code{vat}, set to %code{21.5}:

  #listing[lang=ruby]
    layout '/xsl-report.*', :xsl, vat: '21.5'

#section %h{%code{:yui_compressor}}
  #p The %code{:yui_compressor} filter compresses JavaScript or CSS using the %ref[url=https://www.rubydoc.info/gems/yuicompressor]{YUICompressor} gem.

  #p For example, the following compresses CSS content:

  #listing[lang=ruby]
    filter :yui_compressor, type: 'css'

  #p At least the %code{:type} option must be specified. The %code{:type} option can be set to either %code{'css'} or %code{'js'}, corresponding with CSS and JavaScript.

  #p This filter takes options and passes them on to %code{YUICompressor.compress}. For details on which options are available, consult the %ref[url=https://www.rubydoc.info/gems/yuicompressor/YUICompressor#compress-class_method]{%code{YUICompressor.compress} documentation}. For example, the following will enable name munging in JavaScript:

  #listing[lang=ruby]
    filter :yui_compressor, type: 'js', munge: true
