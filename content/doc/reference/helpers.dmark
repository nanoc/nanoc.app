---
title: "Helpers"
---

#p The following is a list of all helpers that come bundled with Nanoc.

#note Helpers need to be activated before they can be used. For details on how to do so, see %ref[item=/doc/helpers.*]{}.

#section %h{%code{Blogging}}
  #p Provides functionality for building blogs, such as finding articles and constructing feeds.

  #p This helper requires all blog articles to have the %code{kind} attribute set to  %code{"article"}, and %code{created_at} set to the article’s publication timestamp. Some functions in this blogging helper, such as the %code{#atom_feed} function, require additional attributes to be set; these attributes are described in the documentation for these functions.

  #p All time objects in item attributes, site configuration attributes or method parameters can either be a %code{Time} instance, or a string in any format parseable by %code{Time.parse}.

  #dl
    #dt %code{#articles()} → %code{Array}
    #dd
      #p Returns an unsorted list of articles, i.e. items where the %code{kind} attribute is set to %code{"article"}.

    #dt %code{#sorted_articles()} → %code{Array}
    #dd
      #p Returns a sorted list of articles, i.e. items where the %code{kind} attribute is set to %code{"article"}. Articles are sorted by descending creation date, so newer articles appear before older articles.

    #dt %code{#atom_feed()} → %code{String}
    #dd
      #p Returns a string representing the atom feed containing recent articles, sorted by descending creation date.

      #p For this method to be useful, the following attributes must be set on blog articles:

      #dl[compact]
        #dt %code{title}
        #dd The title of the blog post

        #dt %code{created_at}
        #dd (described above)

        #dt %code{kind}
        #dd (described above) — optional if you are passing an explicit list of articles using the %code{:articles} parameter

      #p The following attributes can optionally be set on blog articles to change the behavior of the Atom feed:

      #dl[compact]
        #dt %code{excerpt}
        #dd An excerpt of the article, which is usually only a few lines long.

        #dt %code{custom_path_in_feed}
        #dd The path that will be used instead of the normal path in the feed. This can be useful when including non-outputted items in a feed; such items could have their custom feed path set to the blog path instead, for example.

        #dt %code{custom_url_in_feed}
        #dd The URL that will be used instead of the normal URL in the feed (generated from the site’s base URL + the item rep’s path). This can be useful when building a link-blog where the URL of article is a remote location.

        #dt %code{updated_at}
        #dd The time when the article was last modified. If this attribute is not present, the %code{created_at} attribute will be used as the time when the article was last modified.

      #p The site configuration will need to have the following attributes:

      #dl[compact]
        #dt %code{base_url}
        #dd The URL to the site, without trailing slash. For example, if the site is at %uri{http://example.com/}, the %code{base_url} would be %code{"http://example.com"}.

      #p The feed item will need to know about the feed title, the feed author name, and the URI corresponding to the author. These can be specified using parameters, as attributes in the feed item, or in the site configuration.

      #dl[compact]
        #dt %code{title}
        #dd The title of the feed, which is usually also the title of the blog.

        #dt %code{author_name}
        #dd The name of the item’s author.

        #dt %code{author_uri}
        #dd The URI for the item’s author, such as the author’s website URL.

      #p The feed item can have the following optional attributes:

      #dl[compact]
        #dt %code{feed_url}
        #dd The custom URL of the feed. This can be useful when the private feed URL shouldn’t be exposed; for example, when using FeedBurner this would be set to the public FeedBurner URL.

      #p To construct a feed, create a new item and make sure that it is filtered with %code{:erb} or %code{:erubis}; it should not be laid out. Ensure that it is routed to the proper path, e.g. %identifier{/blog.xml}. It may also be useful to set the %code{is_hidden} attribute to true, so that helpers such as the sitemap helper will ignore the item. The content of the feed item should be %code{<%%= atom_feed %%>}.

      #p Here is an example for defining compilation and routing rules for a feed item:

      #listing[lang=ruby]
        compile '/blog/feed.*' do
          filter :erb
          write '/blog.xml'
        end

      #p Here is an example for limiting the number of items in a feed:

      #listing[lang=rhtml]
        <%%= atom_feed limit: 10 %%>

      #p The %code{#atom_feed} function takes the following options:

      #dl
        #dt %code{:limit} (%code{Number})
        #dd The maximum number of articles to show. By default, 5 items will be included.

        #dt %code{:articles} (%code{Array})
        #dd A list of articles to include in the feed. By default, the list of items returned by %code{#articles} function will be used.

        #dt %code{:preserve_order} (%code{Boolean})
        #dd Whether or not the ordering of the list of articles should be preserved. If %code{false} or unspecified, the articles will be sorted by %code{created_at}. If %code{true}, the list of articles will be used as-is.

        #dt %code{:content_proc} (%code{Proc})
        #dd A proc that returns the content of the given article, which is passed as a parameter. This function may not return nil. By default, it will return the compiled content of item at the %code{:pre} snapshot.

        #dt %code{:excerpt_proc} (%code{proc})
        #dd A proc that returns the excerpt of the given article, passed as a parameter. This function should return nil if there is no excerpt. By default, it will return the content of the %code{excerpt} attribute of the item.

        #dt %code{:title_proc} (%code{proc})
        #dd A proc that returns the title of the given article, passed as a parameter. This function should not return nil. By default, it will return the content of the %code{title} attribute of the item.

        #dt %code{:id_proc} (%code{proc})
        #dd A proc that returns the ID of the given article, passed as a parameter. This function should not return nil. It will fall back to %code{atom_tag_for()}.

        #dt %code{:title} (%code{String})
        #dd The feed's title, if it is not given in the item attributes.

        #dt %code{:author_name} (%code{String})
        #dd The name of the feed's author, if it is not given in the item attributes.

        #dt %code{:author_uri} (%code{String})
        #dd The URI of the feed's author, if it is not given in the item attributes.

        #dt %code{:icon} (%code{String})
        #dd The URI of the feed's icon.

        #dt %code{:logo} (%code{String})
        #dd The URI of the feed's logo.

        #dt %code{:alt_link} (%code{String})
        #dd The contents of the %code{href} of the %code{link} element with %code{rel} set to %code{alternate}. By default, this is the base URL of the site, as specified in the site configuration’s %code{base_url} attribute.

        #dt %code{:id} (%code{String})
        #dd The contents of the %code{id} element. By default, this is the base URL of the site, as specified in the site configuration’s %code{base_url} attribute.

    #dt %code{url_for(%var{item})} → %code{String}
    #dd
      #p Returns the URL for the given item. It will return the URL containing the custom path in the feed if possible, otherwise the normal path.

    #dt %code{feed_url()} → %code{String}
    #dd
      #p Returns the URL of the feed. It will return the custom feed URL if set, or otherwise the normal feed URL.

    #dt %code{atom_tag_for(%var{item})} → %code{String}
    #dd
      #p Returns an URI containing an unique ID for the given item. This will be used in the Atom feed to uniquely identify articles. These IDs are created using a procedure suggested by Mark Pilgrim and described in his %ref[url=http://web.archive.org/web/20110915110202/http://diveintomark.org/archives/2004/05/28/howto-atom-id]{“How to make a good ID in Atom” blog post}.

    #dt %code{attribute_to_time(%var{arg})} → %code{Time}
    #dd
      #p Converts the given attribute (which can be a string, a %code{Time}, a %code{Date} or a %code{DateTime}) into a %code{Time}. When given a %code{Date} instance or a string, the argument is assumed to be in the local timezone.

#section %h{%code{Breadcrumbs}}
  #p The %code{Breadcrumbs} helper provides support for breadcrumbs, which allow the user to go up in the page hierarchy.

  #dl
    #dt %code{#breadcrumbs_trail()} → Array
    #dd
      #p Creates a breadcrumb trail leading from the current item to its parent, to its parent’s parent, etc, until the root item is reached. This function does not require that each intermediate item exist; for example, if there is no %identifier{/foo/} item, breadcrumbs for a %identifier{/foo/bar/} item will contain a %code{nil} element.

      #p This function returns an array containing the breadcrumbs, starting with the root item and ending with the item itself.

      #p The %code{#breadcrumbs_trail} function takes the following options:

      #dl
        #dt %code{:tiebreaker} (%code{Proc} or %code{:error})
        #dd
          #p Defines how to deal with ambiguous parent items. See below for details.

  #section %h[id=breadcrumbs-dealing-with-ambiguity]{Dealing with ambiguity}
    #p To find the parent of an item, the breadcrumbs trail helper will take the item identifier, strip off the last component, append %code{.*} to it, and find any item that matches the resulting pattern. For example, to find the parent of an item with identifier %identifier{/software/nanoc.md}, Nanoc will use the pattern %code{/software.*}.

    #p There can be multiple items that match the resulting pattern, however. Continuing the example above, if there are items with identifiers %identifier{/software.md} and %identifier{/software.erb}, the breadcrumbs trail helper will need to make a decision which parent item to use. By default, Nanoc will print a warning, and use the alphabetically first item (in this example, %identifier{/software.erb} would be used).

    #p The default behavior that deals ambiguity (log a warning and pick the alphabetically first) can be overridden using the %code{:tiebreaker} option. The value for this option can be any of the following:

      #dl
        #dt the symbol %code{:error}
        #dd
          #p Nanoc will raise an error. This option is ideal if you do not expect ambiguity, and want to avoid it for the future. (This will be the default in the next major version of Nanoc.)

        #dt a %code{Proc} with one argument
        #dd
          #p Nanoc will call the %code{Proc}, passing in the list of potential parent items.

        #dt a %code{Proc} with two arguments
        #dd
          #p Nanoc will call the %code{Proc}, passing in the list of potential parent items, as well as the pattern that was used to find the parent items.

  #section %h{Examples}
    #p Getting the breadcrumbs for the %identifier{/projects/nanoc/history/} item, assuming that there is no %identifier{/projects/} item:

    #listing[lang=ruby]
      breadcrumbs_trail
      # => [
      #   <Item* identifier="/">,
      #   nil,
      #   <Item* identifier="/projects/nanoc/">,
      #   <Item* identifier="/projects/nanoc/history/">,
      # ]

#section[id=capturing] %h{%code{Capturing}}
  #p The %code{Capturing} helper provides functionality for capturing content in one place and reusing this content elsewhere.

  #p For example, suppose you want the sidebar of your site to contain a short summary of the item. You could put the summary in the meta file, but that’s not possible when the summary contains eRuby. You could also put the sidebar inside the actual item, but that’s not very pretty. Instead, you write the summary on the item itself, but capture it, and print it in the sidebar layout.

  #p This helper has been tested with ERB and Haml. Other filters may not work correctly.

  #dl
    #dt %code{content_for(name, params = {%}, &block)} → %code{nil}
    #dt %code{content_for(name, params = {%}, string)} → %code{nil}
    #dd
      #p Captures content and stores it so that it can be referenced later on. When given a block, the captured content is the string written to %code{_erbout} by the block. When given a string, the captured content is the given string. Captured content is not outputted.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{name} (%code{Symbol}, %code{String})
        #dd The base name of the attribute into which the content should be stored

      #p By default, capturing content with the same name will raise an error if the newly captured content differs from the previously captured content. This behavior can be changed by providing a different %code{:existing} option to this method:

      #dl[compact]
        #dt %code{:error}
        #dd When content already exists and is not identical, raise an error.

        #dt %code{:overwrite}
        #dd Overwrite the previously captured content with the newly captured content.

        #dt %code{:append}
        #dd Append the newly captured content to the previously captured content.

    #dt %code{content_for(item, name)} → %code{String}
    #dd
      #p Fetches the capture with the given name from the given item and returns it.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{item} (%code{Item})
        #dd The item for which to get the capture

        #dt %var{name} (%code{Symbol}, %code{String})
        #dd The name of the capture to fetch

    #dt %code{capture(&block)} → %code{String}
    #dd
      #p Evaluates the given block and returns its contents. The contents of the block is not outputted.

  #section %h{Examples}
    #p Capturing the content for %code{summary} with a block:

    #listing[lang=rhtml]
      <%% content_for :summary do %%>
        <p>On this item, Nanoc is introduced, blah blah.</p>
      <%% end %%>

    #p Capturing the content for %code{summary} with a string (assuming that the user-defined %code{#summary_for} function returns a string):

    #listing[lang=rhtml]
      <%% content_for :summary, summary_for(@item) %%>

    #p Showing captured content in a sidebar:

    #listing[lang=rhtml]
      <div id="sidebar">
        <h3>Summary</h3>
        <%%= content_for(@item, :summary) || '(no summary)' %%>
      </div>

#section %h{%code{ChildParent}}
  #p The %code{ChildParent} helper provides functionality for fetching the children and the parent of a given item. This works for both full identifiers and legacy identifiers.

  #p For items with full identifiers, the behavior is as follows:

  #dl
    #dt %code{parent_of(%var{item})}
    #dd
      #p Returns the parent of the given item.

    #dt %code{children_of(%var{item})}
    #dd
      #p Returns the children of the given item.

  #section %h{For items with full identifiers}
    #p The parent is the item where the identifier contains one less component than the identifier of the given item, and ends with any extension. For example, the parent of %identifier{/projects/nanoc.md} is any item matching %code{/projects.*}, such as %identifier{/projects.md} or %identifier{/projects.html}.

    #note The parent is potentially ambiguous, and only the first candidate parent item will be returned. For example, if both %identifier{/projects.md} and %identifier{/projects.html} items were to exist, then the parent %identifier{/projects/nanoc.md} could be either. Nanoc will select one at random.

    #p The same applies for finding the children of an item. For example, the children of %identifier{/projects.md} will be any item matching %code{/projects/*}, such as %identifier{/projects/nanoc.md} and %identifier{/projects/cri.adoc}, but not %identifier{/about.md} nor %identifier{/projects/nanoc/history.md}.

    #section %h{Handling index files}
      #p Nanoc does not treat items with the base name %code{index} as special (with one exception described below). An item with identifier %identifier{/projects/index.md} is treated just as %identifier{/projects/nanoc.md}, and so the parent of %identifier{/projects/index.md} will be any item that matches %code{/projects.*}.

      #p The exception is items at the root. Any item matching %code{/*} will have an item matching %code{/index.*} as its parent. For example, an item with identifier %identifier{/projects.md} will have %code{/index.md} as its parent.

      #p This might not be what you want! If you rely on %code{index} files being treated specially, consider defining your own %code{parent_of()} helper:

      #listing[lang=ruby]
        def parent_of(item)
          # e.g. for "/projects/nanoc.md",
          #   the `base` is "/projects"
          base = item.identifier.to_s.sub(/[^\/]+$/, '').chop

          # find e.g. "/projects/index.*"
          #   and fall back to "/projects.*"
          @items[base + '/index.*'] || @items[base + '.*']
        end

      #p If you rely on %code{index} files being treated specially, you’ll also want to provide your own implementation of %code{children_of()}, as well as %code{breadcrumbs_trail()} from the %code{Breadcrumbs} helper.

      #p Nanoc’s built-in helpers are, in large part, intended as a starting point for your own implementation, in case you require more sophisticated behavior.

  #section %h{For items with legacy identifiers}
    #p The parent is the item where the identifier contains one less component than the identifier of the given item. For example, the parent of the %identifier{/projects/nanoc/} item is the %identifier{/projects/} item.

    #p The children are the items where the identifier contains one more component than the identifier of the given item. For example, the children of the %identifier{/projects/} item would be anything that matches %code{/projects/*/}, such as %identifier{/projects/nanoc/} and %identifier{/projects/cri/}, but not %identifier{/about/} nor %identifier{/projects/nanoc/history/}.

#section %h{%code{Filtering}}
  #p The %code{Filtering} helper provides functionality for filtering parts of an item or a layout.

  #dl[compact]
    #dt %code{#filter(%var{filter_name}, %var{arguments} = {%}, &block)}
    #dd
      #p Filters the content in the given block with the %var{filter_name} filter, and outputs it. The %var{arguments} argument is passed as-is to the filter. This function does not return anything; instead, the filtered contents is directly appended to the output buffer (%code{_erbout}).

      #note This function has been tested with ERB only. Other filters may not work correctly.

  #section %h{Examples}
    #p Running the %code{:rubypants} filter on a specific paragraph:

    #listing[lang=rhtml]
      <p>Lorem ipsum dolor sit amet...</p>

      <%% filter :rubypants do %%>
        <p>Consectetur adipisicing elit...</p>
      <%% end %%>

#section %h{%code{HTMLEscape}}
  #p The %code{HTMLEscape} helper contains functionality for HTML-escaping strings. Only the characters %code{&}, %code{<}, %code{>}, and %code{"} are escaped.

  #dl
    #dt %code{html_escape(%var{string} = nil, &block)}
    #dd When given a string, returns the HTML-escaped representation of the given string. When given a block, the contents of the block will be escaped and appended to the output buffer, %code{_erbout}.

  #section %h{Examples}
    #p Escaping a string:

    #listing[lang=ruby]
      h('<br>')
      # => '&lt;br&gt;'

    #p Escaping with a block:

    #listing[lang=rhtml]
      <%% h do %%>
        <h1>Hello <em>world</em>!</h1>
      <%% end %%>

    #p The buffer will now contain %code{&lt;h1&gt;Hello &lt;em&gt;world&lt;/em&gt;!&lt;/h1&gt;}.

#section %h{%code{LinkTo}}
  #p The %code{LinkTo} helper contains functions for linking to items and item representations.

  #dl
    #dt %code{link_to(%var{text}, %var{target}, %var{attributes} = {%})} → %code{String}
    #dd
      #p Creates an HTML link to the given path or item representation, and with the given text. All attributes of the %code{a} element, including the %code{href} attribute, will be HTML-escaped; the contents of the %code{a} element, which can contain markup, will not be HTML-escaped.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{text} (%code{String})
        #dd The visible link text

        #dt %var{target} (%code{String, Item})
        #dd The path/URL, item or item representation that should be linked to

        #dt %var{attributes} (%code{Hash})
        #dd A hash containing HTML attributes (e.g. %code{rel}, %code{title}, …) that will be added to the link.

    #dt %code{link_to_unless_current(%var{text}, %var{target}, %var{attributes} = {%})} → %code{String}
    #dd
      #p Creates an HTML link using %code{#link_to}, except when the linked item is the current one. In this case, a span element with class %code{active} and with the given text will be created. The HTML-escaping rules for %code{#link_to} apply here as well.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{text} (%code{String})
        #dd The visible link text

        #dt %var{target} (%code{String, Item})
        #dd The path/URL, item or item representation that should be linked to

        #dt %var{attributes} (%code{Hash})
        #dd A hash containing HTML attributes (e.g. %code{rel}, %code{title}, …) that will be added to the link.

    #dt %code{relative_path_to(%var{target})} → %code{String}
    #dd
      #p Returns the relative path from the current item to the given path or item representation. The returned path will not be HTML-escaped.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{target} (%code{String, Item})
        #dd The path/URL, item or item representation to which the relative path should be generated

  #section %h{Examples}
    #p Linking to a path:

    #listing[lang=ruby]
      link_to('Blog', '/blog/')
      # => '<a href="/blog/">Blog</a>'

    #p Linking to an item:

    #listing[lang=ruby]
      link_to('About Me', @items['/about.*'])
      # => '<a href="/about/">About Me</a>'

    #p Linking to an item representation:

    #listing[lang=ruby]
      link_to('My vCard', @items['/about.*'].rep(:vcard))
      # => '<a href="/about.vcf">My vCard</a>'

    #p Linking with custom attributes:

    #listing[lang=ruby]
      link_to('Blog', @items['/blog.*'], title: 'My super cool blog')
      # => '<a title="My super cool blog" href="/blog/">Blog</a>'

    #p Linking to a different page, unless current:

    #listing[lang=ruby]
      link_to_unless_current('Blog', @items['/blog.*'])
      # => '<a href="/blog/">Blog</a>'

    #p Linking to the same page, unless current:

    #listing[lang=ruby]
      link_to_unless_current('This Item', @item)
      # => '<span class="active">This Item</span>'

    #p Finding the relative path to an item:

    #listing[lang=ruby]
      # (assuming that the current item’s path is /foo/bar/)
      relative_path_to('/foo/qux/')
      # => '../qux/'

#section[id=rendering] %h{%code{Rendering}}
  #p The %code{Rendering} helper provides functionality for rendering layouts as partials.

  #dl
    #dt %code{render(%var{identifier}, %var{other_assigns} = {%}, &block)}
    #dd
      #p Renders the given layout. The given layout will be run through the first matching layout rule.

      #p When this method is invoked without a block, the return value will be the rendered layout (a string) and %code{_erbout} will not be modified.

      #p When this method is invoked with a block, an empty string will be returned and the rendered content will be appended to %code{_erbout}. In this case, the content of the block will be captured (using the %ref[frag=capturing]{Capturing} helper) and this content will be made available with %code{yield}. In other words, a %code{yield} inside the partial will output the content of the block passed to the method.

      #note The reason why %code{#render} with a block has this behavior of returning an empty string and modifying %code{_erbout} is because the syntax of ERB does not allow combining the %code{<%%= ... %%>} form with a method call that takes a block.

      #p The assigns (%code{@item}, %code{@config}, …) will be available in the partial. It is also possible to pass custom assigns to the method; these assigns will be made available as instance variables inside the partial.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{identifier} (%code{String})
        #dd The identifier of the layout that should be rendered

        #dt %var{other_assigns} (%code{Hash})
        #dd A hash containing extra assigns that will be made available as instance variables in the partial

  #section %h{Examples}
    #p Rendering a head and a foot partial around some text:

    #listing[lang=rhtml]
      <%%= render '/head.*' %%> - MIDDLE - <%%= render '/foot.*' %%>

    #p This example returns %code{"HEAD - MIDDLE - FOOT"}.

    #p Rendering a head partial with a custom title:

    #listing[lang=rhtml]
      <!-- The 'head' layout -->
      <h1><%%= @title %%></h1>

      <!-- The item/layout where the partial is rendered -->
      <%%= render '/head.*', :title => 'Foo' %%>

    #p This example returns %code{"<h1>Foo</h1>"}.

    #p Yielding inside a partial:

    #listing[lang=rhtml]
      <!-- The 'box' partial -->
      <div class="box">
        <%%= yield %%>
      </div>

      <!-- The item/layout where the partial is rendered -->
      <%% render '/box.*' do %%>
        I'm boxy! Luvz!
      <%% end %%>

      <!-- Result -->
      <div class="box">
        I'm boxy! Luvz!
      </div>

#section %h{%code{Tagging}}
  #p The %code{Tagging} helper provides support for managing tags added to items.

  #p To add tags to items, set the %code{tags} attribute to an array of tags that should be applied to the item. For example:

  #listing[yaml]
    tags: [ 'foo', 'bar', 'baz' ]

  #dl
    #dt %code{tags_for(%var{item}, %var{base_url}:, %var{none_text}:, %var{separator}:)} → %code{String}
    #dd
      #p Returns a formatted list of tags for the given item as a string. The tags will be linked using the %code{#link_for_tag} function; the HTML-escaping rules for %code{#link_for_tag} apply here as well.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{base_url} (%code{String, nil})
        #dd The URL to which the tag will be appended to construct the link URL. This URL must have a trailing slash. The function will return a tags string without tag page link if the param is not provided.

        #dt %var{none_text} (%code{String})
        #dd The text to display when the item has no tags. By default, %code{'(none)'} will be used.

        #dt %var{separator} (%code{String})
        #dd The separator to put between tags. By default, %code{', '} will be used, so that tags are comma-separated.

    #dt %code{items_with_tag(%var{tag})} → %code{String}
    #dd
      #p Find all items with the given tag.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{tag} (%code{String})
        #dd The tag for which to find all items

    #dt %code{link_for_tag(%var{tag}, %var{base_url})} → %code{String}
    #dd
      #p Returns a link to to the specified tag. The link is marked up using the rel-tag microformat. The %code{href} attribute of the link will be HTML-escaped, as will the content of the %code{a} element.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{tag} (%code{String})
        #dd The name of the tag, which should consist of letters and numbers (no spaces, slashes, or other special characters).

        #dt %var{base_url} (%code{String})
        #dd The URL to which the tag will be appended to construct the link URL. This URL must have a trailing slash.

#section %h{%code{Text}}
  #p The %code{Text} helper contains useful text-related helper functions.

  #dl
    #dt %code{excerptize(%var{string}, %var{length}: 25, %var{omission}: '...')} → %code{String}
    #dd
      #p Returns an excerpt for the given string. HTML tags are ignored, so if you don't want them to turn up, they should be stripped from the string before passing it to the excerpt function.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{string} (%code{String})
        #dd The string for which to build an excerpt

        #dt %var{length} (%code{Integer})
        #dd The maximum number of characters this excerpt can contain, including the omission.

        #dt %var{omission} (%code{String})
        #dd The string to append to the excerpt when the excerpt is shorter than the original string

    #dt %code{strip_html(%var{string})} → %code{String}
    #dd
      #p Strips all HTML tags out of the given string.

      #p This function takes the following arguments:

      #dl[compact]
        #dt %var{string} (%code{String})
        #dd The string from which to strip all HTML

#section %h{%code{XMLSitemap}}
  #p The %code{XMLSitemap} helper contains functionality for building XML sitemaps that will be crawled by search engines. See the %ref[url=https://www.sitemaps.org/index.html]{Sitemaps protocol site} for details.

  #dl
    #dt %code{xml_sitemap(%var{params} = {%})} → %code{String}
    #dd
      #p Builds an XML sitemap and returns it.

      #p The following attributes can optionally be set on items to change the behavior of the sitemap:

      #dl[compact]
        #dt %code{changefreq}
        #dd The estimated change frequency as defined by the Sitemaps protocol

        #dt %code{priority}
        #dd The item's priority, ranging from 0.0 to 1.0, as defined by the Sitemaps protocol

      #p The sitemap will also include dates on which the items were updated. These are generated automatically; the way this happens depends on the used data source (the filesystem data source checks the file mtimes, for instance).

      #p The site configuration will need to have the following attributes:

      #dl[compact]
        #dt %code{base_url}
        #dd The URL to the site, without trailing slash. For example, if the site is at %code{"http://example.com/"}, the %code{base_url} would be %code{"http://example.com"}.

      #p This function takes the following options:

      #dl[compact]
        #dt %code{:items} (%code{Array})
        #dd A list of items to include in the sitemap

        #dt %code{:rep_select} (%code{Proc})
        #dd A proc to filter reps through. If the proc returns true, the rep will be included; otherwise, it will not.

  #section %h{Examples}
    #p Typically, the value for the %code{:items} option to the %code{#xml_sitemap} method will be all items with a path that ends in %filename{.html}. For example:

    #listing[lang=rhtml]
      <%%= xml_sitemap(items: items.select { |i| i.path.end_with?('.html') %}) %%>

    #p If you want to hide certain items from the XML sitemap, you can add %code{is_hidden: true} to the frontmatter of those items, and then exclude such items from the XML sitemap:

    #listing[lang=rhtml]
      <%%= xml_sitemap(
        items: items.select { |i| !i[:is_hidden] && i.path.end_with?('.html') %}
      ) %%>
