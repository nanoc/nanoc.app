---
title: "Troubleshooting"
---

#section %h[nav-title=“Can’t modify frozen…”]{Error: “can’t modify frozen…”}
  #p Once the compilation process has started, content, and attributes of layouts and items are %emph{frozen}, which means they cannot be modified anymore. For example, the following rule is invalid and will cause a “can’t modify frozen Array” error:

  #listing[lang=ruby]
    compile '/articles/**/*'
      item[:tags] << 'article'
      filter :erb
      layout 'default'
    end

  #p What %emph{is} possible, is modifying content and attributes in the preprocess phase. The preprocess phase is defined using the preprocess block in the Rules file (see %ref[item=/doc/rules.*]{}). For example:

  #listing[lang=ruby]
    preprocess do
      items.select { |i| i.identifier =~ '/articles/**/*' %}.each do |i|
        i[:tags] << 'article'
      end
    end

#section %h[id=character-encoding-issues]{Character encoding issues}
  #p Character encoding issues manifest themselves in two ways:

  #ul
    #li
      #p Some characters do not show up correctly in the output (e.g., ä shows up as Ã¤).

    #li
      #p Nanoc exits with an error such as %output{RegexpError: invalid multibyte character}.

  #p In both cases, text in one character encoding is erroneously interpreted as a different character encoding. There are two possible causes for this.

  #section %h{Wrong output encoding tag}
    #p The text could be in the correct encoding, but Nanoc or the browser interpret it wrongly.

    #p Nanoc’s output is always UTF-8, so the output files should not declare a different encoding. For example, having %code{<meta charset="iso-8859-1">} at the top of files in %filename{output/} is wrong: it should be %code{<meta charset="utf-8">} instead. You should also ensure that your web server sends the right %code{Content-Type}.

  #section %h{Wrong input encoding}
    #p The data sources could interpret the input data in the wrong encoding.

    #p Nanoc defaults to the current environment encoding, which might not be what you expect. If the environment encoding does not match the actual file encoding, it can lead to errors in the output. There are three ways to solve this:

    #ul
      #li
        #p You can re-encode your site’s files. If your content files are not in UTF-8, this is probably a good start. Re-encoding into something else than UTF-8 is not recommended.

      #li
        #p You can modify your environment encoding to match the file encoding. If you run into encoding issues with other sites or libraries, it isn’t a bad idea to set your environment up as UTF-8 and get it over with. You should not change your environment to a non-UTF-8 encoding, as UTF-8 is considered the standard character encoding.

      #li
        #p You can set an explicit encoding in the Nanoc configuration file. This is the recommended approach, as it never hurts to be explicit.

    #p To set the encoding explicitly in the site configuration, open %filename{nanoc.yaml} (or %filename{config.yaml} on older Nanoc sites) and navigate to the section where the data sources are defined. Unless you have modified this section, you will find a single entry for the filesystem data source there. In this section, add something similar to %code{encoding: utf-8} (replacing %code{utf-8} with whatever you really want). It could look like this:

    #listing[lang=yaml]
      data_sources:
        -
          type: filesystem
          encoding: utf-8

    #p For bonus points, you can do all three. Setting up your content, environment, and configuration as UTF-8 is the best way to avoid encoding issues now and in the future.

#section %h[nav-title=YAML timestamp issues]{Timestamps in YAML files parsed incorrectly}
  #p If you work with date/time attributes (such as %code{created_at}, %code{published_at}, and %code{updated_at}) and find that the time is one or more hours off, then this section applies to you.

  #p If you use timestamps in the YAML file, be sure to include the timezone. If no timezone is specified, then UTC is assumed—not the local time zone! Quoting the %ref[url=https://yaml.org/type/timestamp.html]{YAML timestamp specification}:

  #blockquote If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part may be omitted altogether, resulting in a date format. In such a case, the time part is assumed to be %code{00:00:00Z} (start of day, UTC).

  #p We recommend always specifying the time zone.

#section %h{Pages are not being recompiled}
  #p Nanoc tracks data and detects changes, and knows which items to recompile and which ones not to recompile. However, it can only track data that it knows about, and it cannot track changes to global state.

  #p The following kinds of data are not tracked by Nanoc:

  #ul
    #li Global variables (e.g. %code{<%%= $foo %%>})
    #li Constants (e.g. %code{<%%= RUBY_VERSION %%>})
    #li The environment (e.g. %code{<%%= ENV["PROD"] %%>})
    #li The filesystem (e.g. %code{<%%= File.read('oink.txt') %%>})
    #li Time-related data (e.g. %code{<%%= Time.now %%>})
    #li Random data (e.g. %code{<%%= rand(1..10) %%>})
    #li Dynamically evaluated data (e.g. %code{<%%= `ruby --version`.strip %%>})
    #li … and possibly more

  #p It is not feasible for Nanoc (or any Ruby program) to track global state.

  #p Global state creates other problems with Nanoc, too. For example, it is possible to get %code{NoMethodError} errors when using global variables; see %ref[frag=objects-stored-in-global-variables]{} for an idea.

  #p To work around this problem, use the preprocessor to populate the configuration, e.g.

  #listing[lang=ruby]
    preprocess do
      config[:is_staging] = ENV['STAGING'] == 'true'
    end

  #p Then, only refer to the configuration rather than global state, e.g.

  #listing[lang=rhtml]
    <%% if @config[:is_staging] %%>
      <span class="label">STAGING</span>
    <%% end %%>

  #p Changes to global state (%code{ENV} in the example above) will now be detected, and the appropriate pages will be recompiled properly.

#section %h{Hidden files are ignored}
  #p Nanoc by default intentionally ignores files and directories that have a name that starts with a period. Such files and directories are hidden on Unix-like systems, such as macOS and Linux. Nanoc does so because these hidden files and directories are often generated unintentionally; for instance,macOS will generate %filename{.DS_Store} files, and vim generates backup files with a name like %filename{.about.md.un~}.

  #p The filesystem data source can be told to include specific files that would otherwise be ignored. To do so, specify in the data source’s %code{extra_files} attribute the patterns for the files that you would like to be included. For example, the following will include %ref[url=https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/]{GitHub’s %filename{.nojekyll} file} and all files in %ref[url=https://tools.ietf.org/html/rfc5785]{the %filename{.well-known/} directory}:

  #listing[lang=yaml]
    data_sources:
      -
        type: filesystem
        extra_files:
          - "/.well-known/**/*"
          - "/.nojekyll"

  #p Alternatively, route a file whose name does not start with a slash to a path that starts with a slash. For example, the following will copy %filename{content/nojekyll} to %filename{output/.nojekyll}:

  #listing[lang=ruby]
    compile '/nojekyll' do
      write '/.nojekyll'
    end

#section %h{Error: %code{AmbiguousMetadataAssociation}}
  #p This error occurs when there are multiple content files with the same basename, along with a file containing metadata, and Nanoc cannot unambiguously figure out to which content file the metadata file belongs.

  #p For example, assume the following files:

  #ul
    #li %filename{content/about.md}
    #li %filename{content/about.txt}
    #li %filename{content/about.yaml}

  #listing[lang=markdown]
    <!-- This file: content/about.md -->
    Stuff about me goes here…

  #listing[lang=markdown]
    <!-- This file: content/about.txt -->
    Stuff about my dog goes here…

  #listing[lang=yaml]
    # This file: content/about.yaml
    title: About me

  #p The %filename{content/about.yaml} contains metadata, and could be associated with either content file (%filename{content/about.md} or %filename{content/about.txt}). Nanoc has no way of knowing which file to associate the metadata with, and errors.

  #p There is one exception in which case Nanoc will %emph{not} error: if %emph{exactly one} of the content files has no inline metadata (also known as frontmatter), Nanoc will associate the metadata file to this particular content file. For example, in the following case the metadata will be associated with %filename{about.txt}, because it is the only file without inline metadata:

  #listing[lang=markdown]
    <!-- This file: content/about.md -->
    Stuff about me goes here…

  #listing[lang=markdown]
    <!-- This file: content/about.txt -->
    ---
    title: About my dog
    ---

    Stuff about my dog goes here…

  #listing[lang=yaml]
    # This file: content/about.yaml
    title: About me

  #p To fix the %code{AmbiguousMetadataAssociation} error, the recommended approach is to give each content file a distinct name (e.g. %filename{content/about_myself.md} and %filename{content/about_my_dog.md}).

#section %h{Error: %code{CannotDetermineFilter}}
  #p This error occurs when the compilation rule for an item refers to a layout for which no rule exists. For example, a rules file that contains nothing but the following will raise this error:

  #listing[lang=ruby,errors]
    compile '/index.html' do
      layout '/default.*'
      write '/index.html'
    end

  #p To fix this error, ensure that a rule exists for the layout. The example above can be fixed as follows (assuming that the default layout has the filename %filename{layouts/default.erb}):

  #listing[lang=ruby]
    compile '/index.html' do
      layout '/default.*'
      write '/index.html'
    end

    layout '/*.erb', :erb

#section %h{Error: %code{CannotLayoutBinaryItem}}
  #p Nanoc only supports laying out textual items, and will raise the %code{CannotLayoutBinaryItem} error when attempting to lay out binary items.

  #p If the error occurs for an item that you expected to be textual (rather than binary), verify that its extension is included in the %code{text_extensions} array in the site configuration. Refer to %ref[item=/doc/reference/config.*,frag=text-extensions]{the %code{text_extensions} configuration reference} for details.

#section %h{Error: %code{CannotUseBinaryFilter}}
  #p Refer to %ref[frag=error-cannot-use-textual-filter]{the %code{CannotUseBinaryFilter} section}.

#section %h[id=error-cannot-use-textual-filter]{Error: %code{CannotUseTextualFilter}}
  #p Nanoc deliberately prevents textual filters from being applied to binary items, and will raise the %code{CannotUseTextualFilter} error in that case.

  #p To fix this error:

  #ul
    #li
      #p If the error occurs for an item that you expected to be textual (rather than binary), verify that its extension is included in the %code{text_extensions} array in the site configuration. Refer to %ref[item=/doc/reference/config.*,frag=text-extensions]{the %code{text_extensions} configuration reference} for details.

    #li
      #p If the error occurs for a filter that you expect to handle binary items, verify that its type is %code{binary}. Filters are text-to-text by default. Refer to %ref[item=/doc/filters.*,frag=binary-filters]{} for details.

    #li
      #p If the error occurs in a filter that you did not expect to be called, check the Rules file and verify that the correct rule is being applied to the item. Nanoc will use the first matching rule only. The %command{show-rules} command is helpful in showing which rules are being applied.

#section %h{Error: %code{DependencyCycle}}
  #p This error occurs when two or more items depend on each other’s compiled content. For example, imagine these two files:

  #listing[lang=rhtml,errors]
    <!-- content/foo.html -->
    <%%= @items['/bar.*'].compiled_content %%>

  #listing[lang=rhtml,errors]
    <!-- content/bar.html -->
    <%%= @items['/foo.*'].compiled_content %%>

  #p The compiled content of the %filename{foo.html} item depends on the compiled content of the %filename{bar.html} item, and vice versa. Nanoc cannot resolve this, and throws a %code{DependencyCycle} error.

  #p To fix this error, ensure that at least one of these items does not depend on the compiled content of the other.

  #p This error also occurs when a single item depends on the later compiled content of itself. For example, an item with the following content will also cause a %code{DependencyCycle} error:

  #listing[lang=rhtml,errors]
    <%%= @item.compiled_content %%>

#section %h{Error: %code{InvalidEncoding}}
  #p This error occurs when the file content cannot be interpreted in the encoding that Nanoc has inferred. For example, the following piece of code will generate a file that will cause an %code{InvalidEncoding} error if Nanoc assumes the file to be encoded as UTF-8:

  #listing[lang=ruby]
    File.write('content/broken.md', '¿', encoding: 'ISO-8859-1')

  #p See %ref[frag=character-encoding-issues]{} for details on how to fix this issue.

#section %h{Error: %code{FilterReturnedNil}}
  #p This error occurs when a textual filter returns %code{nil} instead of a string. For example, the following filter will cause such an error:

  #listing[lang=ruby,errors]
    Nanoc::Filter.define(:nillify) do |content, params|
      nil
    end

  #p To fix this error, fix the filter’s code to always return a string.

#section %h{Error: %code{InvalidFormat}}
  #p This error occurs when Nanoc detects the presence of frontmatter, but the frontmatter isn’t terminated properly. For example, the following file will cause an %code{InvalidFormat} error, because the frontmatter is missing a final %code{---}:

  #listing[errors]
    ---
    title: Home

    Here is some content.

  #p To fix this error, terminate the frontmatter properly. For example:

  #listing
    ---
    title: Home
    %mark{---}

    Here is some content.

  #p This error can also occur when the file is not supposed to have frontmatter, and the initial %code{---} is meant to be part of the file content. For example, the following will also raise an %code{InvalidFormat} error:

  #listing[errors]
    ---

    This file starts with three dashes!

  #p To tell Nanoc to treat these three dashes part of the content, rather than signaling the start of the frontmatter, add an artificial empty frontmatter:

  #listing
    %mark{---}
    %mark{---}

    ---

    This file starts with three dashes!

#section %h{Error: %code{InvalidFullIdentifierError}}
  #p This error occurs when trying to construct a full identifier for an item or layout with a trailing slash. For instance:

  #listing[errors,lang=ruby]
    Nanoc::Identifier.new('/hello/')

  #p This issue will not occur with legacy identifier types:

  #listing[lang=ruby]
    Nanoc::Identifier.new('/hello/', type: :legacy)

  #p To fix this problem, ensure that full identifiers don’t end with a slash:

  #listing[lang=ruby]
    Nanoc::Identifier.new('/hello')

#section %h{Error: %code{InvalidIdentifierError}}
  #p This error occurs when trying to construct an identifier for an item or layout without a leading slash. For instance:

  #listing[errors,lang=ruby]
    Nanoc::Identifier.new('hello')

  #p To fix this problem, ensure that all identifiers start with a slash:

  #listing[lang=ruby]
    Nanoc::Identifier.new('/hello')

#section %h{Error: %code{InvalidMetadata}}
  #p This error occurs when the frontmatter is not a collection of key-value pairs. For example, the following file will cause an %code{UnparseableMetadata} error:

  #listing[errors]
    ---
    My about page
    ---

    Hello! This page has some details about myself.

  #p To fix this error, ensure the YAML in the front matter is a collection of key-value pairs. For example:

  #listing
    ---
    %mark{title:} My about page
    ---

    Hello! This page has some details about myself.

  #p This error can also occur when the file is not supposed to have frontmatter, and the initial %code{---} is meant to be part of the file content. For example, the following will also raise an %code{UnparseableMetadata} error:

  #listing[errors]
    ---

    Once upon a time, …

    ---

    Another section…

  #p To tell Nanoc to treat these three dashes part of the content, rather than signaling the start of the frontmatter, add an artificial empty frontmatter:

  #listing
    %mark{---}
    %mark{---}

    ---

    Once upon a time, …

    ---

    Another section…

#section %h{Error: %code{MultipleContentFiles}}
  #p This error occurs for %emph{legacy} identifiers when there are multiple files with the same base name, but different extensions. When using legacy identifiers, Nanoc requires each base name to be unique. For example, the following situation will give raise to this error:

  #listing
    content/assets/fonts/foo.eot
    content/assets/fonts/foo.otf

  #p Nanoc converts these filenames to identifiers which do not contain the file extension. In the example given above, both filenames correspond to the identifier %identifier{/assets/fonts/foo/}. Identifiers are required to be unique, and thus Nanoc raises an error.

  #p Nanoc 4 supports %emph{full} identifiers, which, unlike legacy identifiers, contain the file extension (e.g. %filename{/about.md} instead of %filename{/about/}). We recommend enabling full identifiers, as well as glob patterns. For details, see %ref[item=/doc/nanoc-4-upgrade-guide.*]{} and %ref[item=/doc/identifiers-and-patterns.*]{}.

#section %h{Error: %code{NoMethodError}}
  #p A %code{NoMethodError} occurs when attempting to call a method that does not exist — at least not on the object that you’re calling the method on. This can have several causes:

  #ul
    #li A method is misspelled
    #li A helper is not activated
    #li Your code stores Nanoc objects in global variables

  #p The following sections describe these problems in detail.

  #section %h{A method is misspelled}
    #p The method might not be spelled correctly. For example:

    #listing[lang=ruby,errors]
      "hello".uppercase

    #listing
      NoMethodError (undefined method `uppercase' for "hello":String)

    #p To resolve this error, verify that the method is correctly spelled. In the example above, %code{uppercase} should have been %code{upcase} instead:

    #listing[lang=ruby]
      "hello".upcase

    #listing
      HELLO

    #p To browse and search Ruby’s API, refer to the %ref[url=https://apidock.com/ruby/browse]{Ruby documentation on APIdock} or the %ref[url=https://devdocs.io/ruby]{Ruby documentation on DevDocs}.

  #section %h{A helper is not activated}
    #p When a helper method raises a %code{NoMethodError}, the helper might not yet be activated. For example, the following will raise a %code{NoMethodError} if the helper is not activated yet:

    #listing[lang=rhtml,errors]
      <%%= link_to 'About', @items['/about.*'] %%>

    #p To fix this problem, activate the helper by calling %code{use_helper()}, with the helper as the argument, somewhere in %filename{lib/}. For example, to activate the %code{LinkTo} helper:

    #listing[lang=ruby]
      # in lib/helpers.rb
      use_helper Nanoc::Helpers::LinkTo

    #listing[lang=rhtml]
      <%%# the following works now! %%>
      <%%= link_to 'About', @items['/about.*'] %%>

  #section %h[id=objects-stored-in-global-variables]{Nanoc objects are stored in global variables}
    #p If Nanoc objects are passed around through global variables, Nanoc will behave in odd ways, such as raising %code{NoMethodError} exceptions in unusual situations.

    #p For example, the following will raise an error:

    #listing[lang=ruby,errors]
      preprocess do
        $articles = @items.find_all('/articles/*')
      end

      compile '/index.*' do
        filter :list_articles, articles: $articles.map(&:path)
        layout '/default.*'
        write ext: 'html'
      end

    #p This %code{NoMethodError} happens because objects in the preprocess block has a different type than in the compilation rule. During preprocessing, items do not have paths, but in a compilation rule, items do have a path. However, passing items around using a global variable means that they will be of the wrong type in the compilation rule.

    #p The solution: %strong{do not use global variables}. The fact that Nanoc breaks when using global variables is not a bug in Nanoc; global variables generally cause many problems, and Nanoc will not be changed to support them.

    #note Avoid global variables outside of Nanoc, too. They make code brittle. The internet has plenty of resources about the drawbacks of global variables, such as the %ref[url=http://wiki.c2.com/?GlobalVariablesAreBad]{%emph{Global Variables Are Bad} page on WikiWikiWeb}.

    #p To fix this %code{NoMethodError}, remove the use of global variables:

    #listing[lang=ruby]
      compile '/index.*' do
        articles = @items.find_all('/articles/*')
        filter :list_articles, articles: articles.map(&:path)
        layout '/default.*'
        write ext: 'html'
      end

#section %h{Error: %code{OutputNotWritten}}
  #p This error occurs when a binary filter does not create a file at the path defined by %code{output_filename}. For example, the following filter will cause such an error:

  #listing[lang=ruby,errors]
    Class.new(Nanoc::Filter)
      identifier :sample
      type :binary

      def run(content, params = {%})
        # … do nothing!
      end
    end

  #p To fix this error, fix the filter’s code to always create a file at %code{output_filename}:

  #listing[lang=ruby]
    Class.new(Nanoc::Filter)
      identifier :sample
      type :binary

      def run(content, params = {%})
        File.write(output_filename, 'contents go here')
      end
    end

#section %h{Error: %code{UnknownDataSource}}
  #p This error occurs when the %filename{nanoc.yaml} configuration file lists a data source that is not known to Nanoc. For example, the following will cause an %code{UnknownDataSource} if the %code{file_system} data source is not defined:

  #listing[lang=yaml,errors]
    data_sources:
      -
        type: file_system

  #p To fix this error, verify that the data source name is spelled correctly. For example, the example above needs %code{filesystem} rather than %code{file_system}:

  #listing[lang=yaml]
    data_sources:
      -
        type: filesystem

  #p This errors also occurs if the source files that define the data source have not yet been loaded. For example, if a (hypothetical) %code{nanoc-aether} gem defines a data source named %code{aether}, then that gem must be required before the data source can be used. In a file in the %filename{lib/} directory (e.g. %filename{lib/default.rb}), add a %code{require} for the gem:

  #listing[lang=ruby]
    require 'nanoc-aether'

#section %h{Error: %code{UnknownFilter}}
  #p This error occurs when a compilation rule calls a filter that Nanoc does not know about. For example, the following will cause an %code{UnknownFilter} error, assuming that there is no filter named %code{:kram_down}:

  #listing[lang=ruby,errors]
    compile '/articles/*.md' do
      filter :kram_down
      layout '/article.*'
      write item.identifier.without_ext + '/index.html'
    end

  #p To fix this error, verify the spelling of the filter name in the rules file. The example above errors because the filter name is misspelled as %code{kram_down}; fixing the spelling to %code{kramdown} makes the error disappear:

  #listing[lang=ruby]
    compile '/articles/*.md' do
      filter :kramdown
      layout '/article.*'
      write item.identifier.without_ext + '/index.html'
    end

  #p This errors also occurs if the source files that define the filter have not yet been loaded. For example, if a (hypothetical) %code{nanoc-transmogrify} gem defines a filter named %code{transmogrify}, then that gem must be required before the filter can be used. In a file in the %filename{lib/} directory (e.g. %filename{lib/default.rb}), add a %code{require} for the gem:

  #listing[lang=ruby]
    require 'nanoc-transmogrify'

#section %h{Error: %code{UnknownLayout}}
  #p This error occurs when the compilation rule for an item specifies a layout that does not exist. For example, the rule below will cause an %code{UnknownLayout} error, assuming that there is no layout with an identifier matching the %code{/artikle.*} pattern:

  #listing[lang=ruby,errors]
    compile '/articles/*.md' do
      filter :kramdown
      layout '/artikle.*'
      write item.identifier.without_ext + '/index.html'
    end

  #p To fix this error, verify that the layout exists and has the correct identifier, and verify that the correct identifier is used in the rules. In the example above, the identifier of the layout is misspelled as %code{/artikle.*}, and fixing the spelling by changing it to %code{/article.*} makes the error disappear:

  #listing[lang=ruby]
    compile '/articles/*.md' do
      filter :kramdown
      layout '/article.*'
      write item.identifier.without_ext + '/index.html'
    end

#section %h{Error: %code{UnparseableMetadata}}
  #p This error occurs when the frontmatter is not valid YAML. For example, the following file will cause an %code{UnparseableMetadata} error:

  #listing[errors]
    ---
    [Not valid YAML!
    ---

    Here is some content.

  #p To fix this error, ensure the YAML in the front matter is valid. For example:

  #listing
    ---
    %mark{title: Home}
    ---

    Here is some content.

  #p For more information about YAML, see the %ref[url=https://yaml.org/YAML_for_ruby.html]{YAML for Ruby} guide, as well as the %ref[url=https://yaml.org/spec/1.2/spec.html]{YAML specification}.

  #p This error can also occur when the file is not supposed to have frontmatter, and the initial %code{---} is meant to be part of the file content. For example, the following will also raise an %code{UnparseableMetadata} error:

  #listing[errors]
    ---

    [0, 1[ is the interval that contains all real numbers between zero and one, including zero, but not including one.

    ---

    Another section…

  #p To tell Nanoc to treat these three dashes part of the content, rather than signaling the start of the frontmatter, add an artificial empty frontmatter:

  #listing
    %mark{---}
    %mark{---}

    ---

    [0, 1[ is the interval that contains all real numbers between zero and one, including zero, but not including one.

    ---

    Another section…
