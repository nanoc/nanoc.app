---
title: "Internals"
---

#p This document describes some of the internal workings of Nanoc. The audience of this document is potential contributors to Nanoc. You do %emph{not} need to read or understand this document to use Nanoc.

#todo This document is a work in progress. It’s highly incomplete, but will gradually be expanded to include more detail.

#section %h{Data}
  #p Nanoc’s data is divided into two kinds: %firstterm{entities} and %firstterm{views}. Entities contain data, while views wrap entities and provide useful APIs. When using Nanoc in the usual way, you will always deal with views, never with entities.

  #p Entities include %code{Item}, %code{Layout}, their common superclass %code{Document}, %code{ItemRep}, …. They reside in %filename{lib/nanoc/base/entities}. Views include %code{MutableItemView}, %code{CompilationItemView}, %code{PostCompileItemRepView}, …. They reside in %filename{lib/nanoc/base/views}.

  #p Views are, unlike entities, context-specific. The %code{Item} entity, for example, has %code{MutableItemView}, %code{CompilationItemView} and %code{PostCompileItemView}. %code{MutableItemView} is used during preprocessing and allows mutating properties of the item, while the other view classes do not. %code{PostCompileItemView} is used during preprocessing and provides %code{modified_reps()}, which is not available in the other item views.

  #p Operations performed on an entity will typically yield another entity or a primitive, such as a string or a number. Similarly, operations performed on a view will typically yield another view. Converting from a view to an entity happens by calling %code{_unwrap()}, and wrapping an entity in a view happens by creating an instance of a view class that references the entity.

  #note The %code{_unwrap()} method is a private method, and is not meant to be used outside of the Nanoc codebase. There is no guarantee that this method will keep working.

#section %h[id=outdatedness-checking]{Outdatedness checking}
  #p Nanoc is a smart static-site generator; it avoids recompiling items unless necessary.

  #p Nanoc will recompile an item if it is deemed to be outdated. The class responsible for determining whether or not an item is outdated is the %code{OutdatednessChecker}. An item is considered as outdated if any of the following conditions hold:

  #ul
    #li The item’s content has changed
    #li The item’s attributes have changed
    #li The site configuration has changed
    #li The rule for this item has changed
    #li Some output files for this item do not exist
    #li New items or layouts have been added
    #li A dependent item or layout is considered as outdated

  #p The last condition is necessary, because an item might use data of another item or layout.

  #section %h{Dependency tracking}
    #p If an item uses data from another entity, Nanoc will record a dependency from the former item onto the latter entity. This type of dependency is used to infer the outdatedness of an item, and is called a %firstterm{soft dependency}. Nanoc records a dependency in the following cases:

    #ul
      #li The raw content of an item or layout is accessed
      #li The compiled content of an item is accessed
      #li An attribute of an item or layout is accessed
      #li An attribute of the site configuration is accessed
      #li An item representation’s path is accessed
      #li The collection of items or layouts is accessed

    #p For example, the following code snippet will generate dependencies:

    #listing[lang=rhtml]
      <!-- Creates a dependency on the /about.* page -->
      See the <%%= link_to @items['/about.*'] %%> page.

      <!-- Creates a dependency on every item -->
      See the <%%= link_to @items.select { |i| i[:title] =~ /About/ %}.first %%> page.

      <!-- Creates a dependency on any item whose identifier matches /gallery/*  -->
      <%% @items.find_all('/gallery/*').each do |i| %%>
        <li><%%= link_to i %%></li>
      <%% end %%>

    #p For every dependency, Nanoc remembers which of the following properties are affected by the dependency:

    #ul
      #li the raw content
      #li the attributes, and which
      #li the compiled content
      #li the path

    #p An item will only be considered as outdated due to dependencies when the dependencies’ properties match the outdatedness reason of the targets of the dependency.

    #p For example, if an item B is marked as outdated due to an attribute %code{title} being changed, and another item A has a dependency on the %code{title} attribute of former item B, then the item A will be considered as outdated:

    #figure[compact]
      #img /assets/images/dependencies_and_outdatedness_b.png
      #caption Outdated, because item A depends on item B’s %code{title} attribute, which has changed

    #p If item B’s %code{tagline} attribute were changed, rather than the %code{title} attribute, then the item A would not be considered as outdated:

    #figure[compact]
      #img /assets/images/dependencies_and_outdatedness_a.png
      #caption Not outdated, because no dependency triggers outdatedness

    #p If the dependency were a dependency on the %emph{raw content} rather than the attributes, the source of the dependency would not be considered as outdated:

    #figure[compact]
      #img /assets/images/dependencies_and_outdatedness_c.png
      #caption Not outdated, because no dependency triggers outdatedness

    #p Similarly, an item that depends on a certain configuration attribute will be considered as outdated when this configuration attribute has changed.

#section %h{Compilation order}
  #p The order in which item representations are compiled, depends on the dependencies on compiled content between individual item representations.

  #section %h{Dependencies on compiled content}
    #p An item representation can depend on the compiled content of another item representation. For example, blog archive pages typically tend to contain (snippets of) the content of individual blog posts. An item representation which contains the compiled content of another item representation cannot be compiled until the compiled content of the dependent item representation is available. If this compiled content is not available and Nanoc tries to compile the item representation, then the compilation is suspended.

    #p It is normal for the compilation for an item to be suspended. It merely indicates that the dependent item representation should be compiled first. The dependencies of an item representation are not known until Nanoc has finished compiling the item representation, and so Nanoc cannot make an accurate estimation of what a proper order of compilation is. For that reason, compilation suspensions are not only expected, but commonplace.

    #p A dependency from one item representation onto another item representation’s compiled content is called a %firstterm{hard dependency}, as opposed to a soft dependency, which is used in outdatedness checking. A compilation suspension always indicates a hard dependency.

  #section %h{Compilation selection}
    #p Once Nanoc has selected the items representations that it deems are outdated (see %ref[frag=outdatedness-checking]{}), it will compile these item reps in the best possible order. The class responsible for determining this order is the %code{ItemRepSelector}.

    #p Nanoc will attempt to compile every outdated item representation sequentially. If an item representation cannot be compiled due to a compilation suspension, Nanoc will attempt to compile the item rep that is depended on. If the item rep that is depended on is also suspended, Nanoc will raise an error, informing the user of a dependency cycle.

    #note The term “compile” or “recompile” does not always mean that the item will be recompiled from scratch; Nanoc keeps a cache of compiled content and will reuse cached compiled content if possible.

#section %h{Action providers}
  #p An action provider is a plugin that describes the actions that need to be taken in order to process each item. The rules DSL is the default (and at the moment of writing, only) action provider; it reads actions from the %filename{Rules} file.

  #note The name “action provider” is internal and does not accurate reflect its purpose. The name “action provider” will likely go away.

  #p An action provider needs to support the following methods:

  #dl
    #dt %code{rep_names_for(item)}
    #dd
      #p Given an item, returns the representation names for that item (e.g. %code{[:default]}).

    #dt %code{action_sequence_for(rep)}
    #dd
      #p Returns the sequence of actions to be taken in order to process the item representation %code{rep}.

  #p An action sequence is an instance of %code{Nanoc::Int::ActionSequence}, and it contains zero or more of the following actions, in order (all in the %code{Nanoc::Int::ProcessingActions} namespace):

  #dl
    #dt %code{Filter.new(filter_name, params)}
    #dd
      #p Apply the filter with the given %code{filter_name} (a %code{Symbol}), with optional parameters.

    #dt %code{Layout.new(layout_identifier, params)}
    #dd
      #p Apply the layout with the given identifier (a %code{String}), with optional parameters.

    #dt %code{Snapshot.new(snapshot_names, paths)}
    #dd
      #p Create a snapshot with one or more names (%code{Symbol}s), and zero or more paths (%code{String}s).

  #todo Describe %code{preprocess(site)}, %code{postprocess(site, reps)}, and %code{need_preprocessing?}.

#section %h{Compilation stages and phases}
  #p The compilation process is divided into a sequence of stages. Each of these is run only once, in sequence:

  #dl
    #dt %code{Preprocess}
    #dd Run the preprocessor, defined in the %filename{Rules} file, if any.

    #dt %code{BuildReps}
    #dd For each item, determine which representations it has, along with the processing instructions (“action sequences”) that go with it.

    #dt %code{LoadStores}
    #dd Read state information from the previous compilation (if any) in memory. This includes previous checksums, previous outdatedness information, etc.

    #dt %code{CalculateChecksums}
    #dd Calculate checksums for every item, layout, …

    #dt %code{DetermineOutdatedness}
    #dd For every item representation, determine whether or not it is outdated and therefore needs to be recompiled.

    #dt %code{ForgetOutdatedDependencies}
    #dd For every outdated item representation, remove dependencies that originate from it. The dependency information is not useful, as it is outdated.

    #dt %code{StorePreCompilationState}
    #dd Write out the current checksums along with the action sequences for each item representation.

    #dt %code{Prune}
    #dd Remove all files in the output directory that do not correspond to item representations.

    #dt %code{CompileReps}
    #dd Loop through all item representations and compile them. (See below for details.)

    #dt %code{StorePostCompilationState}
    #dd Write out all dependency information.

    #dt %code{Postprocess}
    #dd Run the postprocessor, defined in the %filename{Rules} file, if any.

    #dt %code{Cleanup}
    #dd Remove all intermediate files that are no longer used after compilation is finished.

  #p The %code{CompileReps} will loop through all item representations and compile them. Each item representation will go through each of the following phases, in sequence:

  #dl
    #dt %code{MarkDone}
    #dd Yields to the next phase, and then marks the item representation as compiled.

    #dt %code{Write}
    #dd Yields to the next phase, and then writes out all files for this item representation.

    #dt %code{Resume}
    #dd Suspends compilation of the item representation when dependency errors occur, and resumes compilation when the dependency errors are resolves.

    #dt %code{Cache}
    #dd If possible, loads the already-compiled content for this item representation from the cache.

    #dt %code{Recalculate}
    #dd Executes all actions needed to calculate the compiled content for this item representation.
