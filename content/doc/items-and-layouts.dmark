---
title: "Items and layouts"
---

#section %h{Items}
  #p Pages, such as an about page, and assets, such as a stylesheet or an image, are collectively called %firstterm{items}.

  #p An item has content, attributes, and an %ref[item=/doc/identifiers-and-patterns.*]{identifier}.

  #p Item content can be textual or binary. If the extension of the item is included in the site configuration’s %ref[item=/doc/reference/config.*,frag=text_extensions]{%code{text_extension}} list, it is considered to be textual; otherwise, it will be binary. Binary items don’t have their content stored in-memory. Instead, binary items have a filename pointing to the file containing the content.

  #p Each item has attributes (metadata) associated with it. This metadata consists of key-value pairs. All attributes are free-form; there are no predefined attributes.

  #note Some data sources set attributes on items by default. The %code{filesystem} data source, for example, sets %code{content_filename} and %code{meta_filename}, among others. Refer to %ref[item=/doc/data-sources.*,frag=the-filesystem-data-source]{} for details.

  #section %h{Item representations}
    #p Every item has one or more %firstterm{item representations} (or “reps” for short). An item representation is the compiled form of an item. Some examples of item representations:

    #ul
      #li an HTML representation, which will be the default for almost all sites
      #li an RSS representation, useful for the home page for a blog
      #li a JSON representation, so that the site can act as a read-only web API
      #li a %ref[url=https://en.wikipedia.org/wiki/Cue_sheet_(computing)]{cue sheet} representation, useful for track list pages

    #p An item rep has a name, which usually refers to the format the content is in (%code{html}, %code{json}, %code{rss}, …). Unless otherwise specified, there will be a default representation, aptly named %code{default}.

  #section %h{Item snapshots}
    #p A %firstterm{snapshot} is the compiled content at a specific point during the compilation process. Snapshots can be generated manually, but some snapshots are generated automatically.

    #p The following snapshots are generated automatically:

    #dl
      #dt %code{:raw}
      #dd The content right before actual compilation is started

      #dt %code{:pre}
      #dd The content right before the item is laid out

      #dt %code{:last}
      #dd The most recent compiled content

    #p Binary items cannot have snapshots.

#section %h{Layouts}
  #p A %firstterm{layout} is the “frame” for content to go into. Typically, a layout adds a header, and a footer to a page.

  #p The following is a minimal layout that includes the content using %code{yield}, and emits some metadata:

  #listing[lang=eruby]
    <html>
      <head>
        <title><%%=h @item[:title] %%></title>
      </head>
      <body>
        <%%= yield %%>
      </body>
    </html>

  #p An item is laid out using %code{layout()} function in a compilation rule. See %ref[item=/doc/rules.*]{} page for details.

  #p Just like items, layouts have attributes and an %ref[item=/doc/identifiers-and-patterns.*]{identifier}.

  #section %h{Partials}
    #p A layout can be used as a %firstterm{partial}. A partial is a layout that is not used for laying out an item, but is rather intended to be included into another item or layout. Because of this, partials typically call %code{yield}.

    #p To enable partials, first activate the rendering helper somewhere inside the %filename{lib/} directory, such as %filename{lib/helpers.rb}:

    #listing[lang=ruby]
      use_helper Nanoc::Helpers::Rendering

    #p To render a partial, call %code{render()} with the identifier or a glob as an argument:

    #listing[lang=eruby]
      <%%= render '/head.*' %%>

    #p For details, see the %ref[item=/doc/reference/helpers.*,frag=rendering]{documentation for the %code{Rendering} helper}.
